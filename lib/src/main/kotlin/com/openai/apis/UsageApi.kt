/**
 * Please note: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). Do not edit this file manually.
 */
@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package com.openai.apis

import com.openai.infrastructure.ApiClient
import com.openai.infrastructure.ApiResponse
import com.openai.infrastructure.ClientError
import com.openai.infrastructure.ClientException
import com.openai.infrastructure.MultiValueMap
import com.openai.infrastructure.RequestConfig
import com.openai.infrastructure.RequestMethod
import com.openai.infrastructure.ResponseType
import com.openai.infrastructure.ServerError
import com.openai.infrastructure.ServerException
import com.openai.infrastructure.Success
import com.openai.infrastructure.toMultiValue
import com.openai.models.UsageResponse
import com.squareup.moshi.Json
import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

class UsageApi(
    basePath: kotlin.String = defaultBasePath,
    client: Call.Factory = ApiClient.defaultClient,
) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties()
                .getProperty(ApiClient.baseUrlKey, "https://api.openai.com/v1")
        }
    }

    /** enum for parameter bucketWidth */
    enum class BucketWidthUsageAudioSpeeches(val value: kotlin.String) {
        @Json(name = "1m") _1m("1m"),
        @Json(name = "1h") _1h("1h"),
        @Json(name = "1d") _1d("1d");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /** enum for parameter groupBy */
    enum class GroupByUsageAudioSpeeches(val value: kotlin.String) {
        @Json(name = "project_id") project_id("project_id"),
        @Json(name = "user_id") user_id("user_id"),
        @Json(name = "api_key_id") api_key_id("api_key_id"),
        @Json(name = "model") model("model");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /**
     * Get audio speeches usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return UsageResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun usageAudioSpeeches(
        startTime: kotlin.Int,
        endTime: kotlin.Int? = null,
        bucketWidth: BucketWidthUsageAudioSpeeches? =
            BucketWidthUsageAudioSpeeches._1d,
        projectIds: kotlin.collections.List<kotlin.String>? = null,
        userIds: kotlin.collections.List<kotlin.String>? = null,
        apiKeyIds: kotlin.collections.List<kotlin.String>? = null,
        models: kotlin.collections.List<kotlin.String>? = null,
        groupBy: kotlin.collections.List<GroupByUsageAudioSpeeches>? = null,
        limit: kotlin.Int? = null,
        page: kotlin.String? = null,
    ): UsageResponse {
        val localVarResponse =
            usageAudioSpeechesWithHttpInfo(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as UsageResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Get audio speeches usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return ApiResponse<UsageResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usageAudioSpeechesWithHttpInfo(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageAudioSpeeches?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageAudioSpeeches>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): ApiResponse<UsageResponse?> {
        val localVariableConfig =
            usageAudioSpeechesRequestConfig(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return request<Unit, UsageResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation usageAudioSpeeches
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return RequestConfig
     */
    fun usageAudioSpeechesRequestConfig(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageAudioSpeeches?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageAudioSpeeches>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    put("start_time", listOf(startTime.toString()))
                    if (endTime != null) {
                        put("end_time", listOf(endTime.toString()))
                    }
                    if (bucketWidth != null) {
                        put("bucket_width", listOf(bucketWidth.value))
                    }
                    if (projectIds != null) {
                        put(
                            "project_ids",
                            toMultiValue(projectIds.toList(), "multi"),
                        )
                    }
                    if (userIds != null) {
                        put("user_ids", toMultiValue(userIds.toList(), "multi"))
                    }
                    if (apiKeyIds != null) {
                        put(
                            "api_key_ids",
                            toMultiValue(apiKeyIds.toList(), "multi"),
                        )
                    }
                    if (models != null) {
                        put("models", toMultiValue(models.toList(), "multi"))
                    }
                    if (groupBy != null) {
                        put("group_by", toMultiValue(groupBy.toList(), "multi"))
                    }
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (page != null) {
                        put("page", listOf(page.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organization/usage/audio_speeches",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /** enum for parameter bucketWidth */
    enum class BucketWidthUsageAudioTranscriptions(val value: kotlin.String) {
        @Json(name = "1m") _1m("1m"),
        @Json(name = "1h") _1h("1h"),
        @Json(name = "1d") _1d("1d");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /** enum for parameter groupBy */
    enum class GroupByUsageAudioTranscriptions(val value: kotlin.String) {
        @Json(name = "project_id") project_id("project_id"),
        @Json(name = "user_id") user_id("user_id"),
        @Json(name = "api_key_id") api_key_id("api_key_id"),
        @Json(name = "model") model("model");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /**
     * Get audio transcriptions usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return UsageResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun usageAudioTranscriptions(
        startTime: kotlin.Int,
        endTime: kotlin.Int? = null,
        bucketWidth: BucketWidthUsageAudioTranscriptions? =
            BucketWidthUsageAudioTranscriptions._1d,
        projectIds: kotlin.collections.List<kotlin.String>? = null,
        userIds: kotlin.collections.List<kotlin.String>? = null,
        apiKeyIds: kotlin.collections.List<kotlin.String>? = null,
        models: kotlin.collections.List<kotlin.String>? = null,
        groupBy: kotlin.collections.List<GroupByUsageAudioTranscriptions>? =
            null,
        limit: kotlin.Int? = null,
        page: kotlin.String? = null,
    ): UsageResponse {
        val localVarResponse =
            usageAudioTranscriptionsWithHttpInfo(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as UsageResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Get audio transcriptions usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return ApiResponse<UsageResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usageAudioTranscriptionsWithHttpInfo(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageAudioTranscriptions?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageAudioTranscriptions>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): ApiResponse<UsageResponse?> {
        val localVariableConfig =
            usageAudioTranscriptionsRequestConfig(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return request<Unit, UsageResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation usageAudioTranscriptions
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return RequestConfig
     */
    fun usageAudioTranscriptionsRequestConfig(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageAudioTranscriptions?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageAudioTranscriptions>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    put("start_time", listOf(startTime.toString()))
                    if (endTime != null) {
                        put("end_time", listOf(endTime.toString()))
                    }
                    if (bucketWidth != null) {
                        put("bucket_width", listOf(bucketWidth.value))
                    }
                    if (projectIds != null) {
                        put(
                            "project_ids",
                            toMultiValue(projectIds.toList(), "multi"),
                        )
                    }
                    if (userIds != null) {
                        put("user_ids", toMultiValue(userIds.toList(), "multi"))
                    }
                    if (apiKeyIds != null) {
                        put(
                            "api_key_ids",
                            toMultiValue(apiKeyIds.toList(), "multi"),
                        )
                    }
                    if (models != null) {
                        put("models", toMultiValue(models.toList(), "multi"))
                    }
                    if (groupBy != null) {
                        put("group_by", toMultiValue(groupBy.toList(), "multi"))
                    }
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (page != null) {
                        put("page", listOf(page.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organization/usage/audio_transcriptions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /** enum for parameter bucketWidth */
    enum class BucketWidthUsageCodeInterpreterSessions(
        val value: kotlin.String
    ) {
        @Json(name = "1m") _1m("1m"),
        @Json(name = "1h") _1h("1h"),
        @Json(name = "1d") _1d("1d");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /** enum for parameter groupBy */
    enum class GroupByUsageCodeInterpreterSessions(val value: kotlin.String) {
        @Json(name = "project_id") project_id("project_id");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /**
     * Get code interpreter sessions usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return UsageResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun usageCodeInterpreterSessions(
        startTime: kotlin.Int,
        endTime: kotlin.Int? = null,
        bucketWidth: BucketWidthUsageCodeInterpreterSessions? =
            BucketWidthUsageCodeInterpreterSessions._1d,
        projectIds: kotlin.collections.List<kotlin.String>? = null,
        groupBy: kotlin.collections.List<GroupByUsageCodeInterpreterSessions>? =
            null,
        limit: kotlin.Int? = null,
        page: kotlin.String? = null,
    ): UsageResponse {
        val localVarResponse =
            usageCodeInterpreterSessionsWithHttpInfo(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as UsageResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Get code interpreter sessions usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return ApiResponse<UsageResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usageCodeInterpreterSessionsWithHttpInfo(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageCodeInterpreterSessions?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageCodeInterpreterSessions>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): ApiResponse<UsageResponse?> {
        val localVariableConfig =
            usageCodeInterpreterSessionsRequestConfig(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return request<Unit, UsageResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation
     * usageCodeInterpreterSessions
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return RequestConfig
     */
    fun usageCodeInterpreterSessionsRequestConfig(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageCodeInterpreterSessions?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageCodeInterpreterSessions>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    put("start_time", listOf(startTime.toString()))
                    if (endTime != null) {
                        put("end_time", listOf(endTime.toString()))
                    }
                    if (bucketWidth != null) {
                        put("bucket_width", listOf(bucketWidth.value))
                    }
                    if (projectIds != null) {
                        put(
                            "project_ids",
                            toMultiValue(projectIds.toList(), "multi"),
                        )
                    }
                    if (groupBy != null) {
                        put("group_by", toMultiValue(groupBy.toList(), "multi"))
                    }
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (page != null) {
                        put("page", listOf(page.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organization/usage/code_interpreter_sessions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /** enum for parameter bucketWidth */
    enum class BucketWidthUsageCompletions(val value: kotlin.String) {
        @Json(name = "1m") _1m("1m"),
        @Json(name = "1h") _1h("1h"),
        @Json(name = "1d") _1d("1d");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /** enum for parameter groupBy */
    enum class GroupByUsageCompletions(val value: kotlin.String) {
        @Json(name = "project_id") project_id("project_id"),
        @Json(name = "user_id") user_id("user_id"),
        @Json(name = "api_key_id") api_key_id("api_key_id"),
        @Json(name = "model") model("model"),
        @Json(name = "batch") batch("batch");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /**
     * Get completions usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param batch If &#x60;true&#x60;, return batch jobs only. If
     *   &#x60;false&#x60;, return non-batch jobs only. By default, return both.
     *   (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any
     *   combination of them. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return UsageResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun usageCompletions(
        startTime: kotlin.Int,
        endTime: kotlin.Int? = null,
        bucketWidth: BucketWidthUsageCompletions? =
            BucketWidthUsageCompletions._1d,
        projectIds: kotlin.collections.List<kotlin.String>? = null,
        userIds: kotlin.collections.List<kotlin.String>? = null,
        apiKeyIds: kotlin.collections.List<kotlin.String>? = null,
        models: kotlin.collections.List<kotlin.String>? = null,
        batch: kotlin.Boolean? = null,
        groupBy: kotlin.collections.List<GroupByUsageCompletions>? = null,
        limit: kotlin.Int? = null,
        page: kotlin.String? = null,
    ): UsageResponse {
        val localVarResponse =
            usageCompletionsWithHttpInfo(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                batch = batch,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as UsageResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Get completions usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param batch If &#x60;true&#x60;, return batch jobs only. If
     *   &#x60;false&#x60;, return non-batch jobs only. By default, return both.
     *   (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any
     *   combination of them. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return ApiResponse<UsageResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usageCompletionsWithHttpInfo(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageCompletions?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        batch: kotlin.Boolean?,
        groupBy: kotlin.collections.List<GroupByUsageCompletions>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): ApiResponse<UsageResponse?> {
        val localVariableConfig =
            usageCompletionsRequestConfig(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                batch = batch,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return request<Unit, UsageResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation usageCompletions
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param batch If &#x60;true&#x60;, return batch jobs only. If
     *   &#x60;false&#x60;, return non-batch jobs only. By default, return both.
     *   (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any
     *   combination of them. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return RequestConfig
     */
    fun usageCompletionsRequestConfig(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageCompletions?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        batch: kotlin.Boolean?,
        groupBy: kotlin.collections.List<GroupByUsageCompletions>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    put("start_time", listOf(startTime.toString()))
                    if (endTime != null) {
                        put("end_time", listOf(endTime.toString()))
                    }
                    if (bucketWidth != null) {
                        put("bucket_width", listOf(bucketWidth.value))
                    }
                    if (projectIds != null) {
                        put(
                            "project_ids",
                            toMultiValue(projectIds.toList(), "multi"),
                        )
                    }
                    if (userIds != null) {
                        put("user_ids", toMultiValue(userIds.toList(), "multi"))
                    }
                    if (apiKeyIds != null) {
                        put(
                            "api_key_ids",
                            toMultiValue(apiKeyIds.toList(), "multi"),
                        )
                    }
                    if (models != null) {
                        put("models", toMultiValue(models.toList(), "multi"))
                    }
                    if (batch != null) {
                        put("batch", listOf(batch.toString()))
                    }
                    if (groupBy != null) {
                        put("group_by", toMultiValue(groupBy.toList(), "multi"))
                    }
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (page != null) {
                        put("page", listOf(page.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organization/usage/completions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /** enum for parameter bucketWidth */
    enum class BucketWidthUsageCosts(val value: kotlin.String) {
        @Json(name = "1d") _1d("1d");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /** enum for parameter groupBy */
    enum class GroupByUsageCosts(val value: kotlin.String) {
        @Json(name = "project_id") project_id("project_id"),
        @Json(name = "line_item") line_item("line_item");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /**
     * Get costs details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently only
     *   &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;. (optional,
     *   default to 1d)
     * @param projectIds Return only costs for these projects. (optional)
     * @param groupBy Group the costs by the specified fields. Support fields
     *   include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any
     *   combination of them. (optional)
     * @param limit A limit on the number of buckets to be returned. Limit can
     *   range between 1 and 180, and the default is 7. (optional, default to 7)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return UsageResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun usageCosts(
        startTime: kotlin.Int,
        endTime: kotlin.Int? = null,
        bucketWidth: BucketWidthUsageCosts? = BucketWidthUsageCosts._1d,
        projectIds: kotlin.collections.List<kotlin.String>? = null,
        groupBy: kotlin.collections.List<GroupByUsageCosts>? = null,
        limit: kotlin.Int? = 7,
        page: kotlin.String? = null,
    ): UsageResponse {
        val localVarResponse =
            usageCostsWithHttpInfo(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as UsageResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Get costs details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently only
     *   &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;. (optional,
     *   default to 1d)
     * @param projectIds Return only costs for these projects. (optional)
     * @param groupBy Group the costs by the specified fields. Support fields
     *   include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any
     *   combination of them. (optional)
     * @param limit A limit on the number of buckets to be returned. Limit can
     *   range between 1 and 180, and the default is 7. (optional, default to 7)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return ApiResponse<UsageResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usageCostsWithHttpInfo(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageCosts?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageCosts>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): ApiResponse<UsageResponse?> {
        val localVariableConfig =
            usageCostsRequestConfig(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return request<Unit, UsageResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation usageCosts
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently only
     *   &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;. (optional,
     *   default to 1d)
     * @param projectIds Return only costs for these projects. (optional)
     * @param groupBy Group the costs by the specified fields. Support fields
     *   include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any
     *   combination of them. (optional)
     * @param limit A limit on the number of buckets to be returned. Limit can
     *   range between 1 and 180, and the default is 7. (optional, default to 7)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return RequestConfig
     */
    fun usageCostsRequestConfig(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageCosts?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageCosts>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    put("start_time", listOf(startTime.toString()))
                    if (endTime != null) {
                        put("end_time", listOf(endTime.toString()))
                    }
                    if (bucketWidth != null) {
                        put("bucket_width", listOf(bucketWidth.value))
                    }
                    if (projectIds != null) {
                        put(
                            "project_ids",
                            toMultiValue(projectIds.toList(), "multi"),
                        )
                    }
                    if (groupBy != null) {
                        put("group_by", toMultiValue(groupBy.toList(), "multi"))
                    }
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (page != null) {
                        put("page", listOf(page.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organization/costs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /** enum for parameter bucketWidth */
    enum class BucketWidthUsageEmbeddings(val value: kotlin.String) {
        @Json(name = "1m") _1m("1m"),
        @Json(name = "1h") _1h("1h"),
        @Json(name = "1d") _1d("1d");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /** enum for parameter groupBy */
    enum class GroupByUsageEmbeddings(val value: kotlin.String) {
        @Json(name = "project_id") project_id("project_id"),
        @Json(name = "user_id") user_id("user_id"),
        @Json(name = "api_key_id") api_key_id("api_key_id"),
        @Json(name = "model") model("model");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /**
     * Get embeddings usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return UsageResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun usageEmbeddings(
        startTime: kotlin.Int,
        endTime: kotlin.Int? = null,
        bucketWidth: BucketWidthUsageEmbeddings? =
            BucketWidthUsageEmbeddings._1d,
        projectIds: kotlin.collections.List<kotlin.String>? = null,
        userIds: kotlin.collections.List<kotlin.String>? = null,
        apiKeyIds: kotlin.collections.List<kotlin.String>? = null,
        models: kotlin.collections.List<kotlin.String>? = null,
        groupBy: kotlin.collections.List<GroupByUsageEmbeddings>? = null,
        limit: kotlin.Int? = null,
        page: kotlin.String? = null,
    ): UsageResponse {
        val localVarResponse =
            usageEmbeddingsWithHttpInfo(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as UsageResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Get embeddings usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return ApiResponse<UsageResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usageEmbeddingsWithHttpInfo(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageEmbeddings?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageEmbeddings>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): ApiResponse<UsageResponse?> {
        val localVariableConfig =
            usageEmbeddingsRequestConfig(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return request<Unit, UsageResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation usageEmbeddings
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return RequestConfig
     */
    fun usageEmbeddingsRequestConfig(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageEmbeddings?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageEmbeddings>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    put("start_time", listOf(startTime.toString()))
                    if (endTime != null) {
                        put("end_time", listOf(endTime.toString()))
                    }
                    if (bucketWidth != null) {
                        put("bucket_width", listOf(bucketWidth.value))
                    }
                    if (projectIds != null) {
                        put(
                            "project_ids",
                            toMultiValue(projectIds.toList(), "multi"),
                        )
                    }
                    if (userIds != null) {
                        put("user_ids", toMultiValue(userIds.toList(), "multi"))
                    }
                    if (apiKeyIds != null) {
                        put(
                            "api_key_ids",
                            toMultiValue(apiKeyIds.toList(), "multi"),
                        )
                    }
                    if (models != null) {
                        put("models", toMultiValue(models.toList(), "multi"))
                    }
                    if (groupBy != null) {
                        put("group_by", toMultiValue(groupBy.toList(), "multi"))
                    }
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (page != null) {
                        put("page", listOf(page.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organization/usage/embeddings",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /** enum for parameter bucketWidth */
    enum class BucketWidthUsageImages(val value: kotlin.String) {
        @Json(name = "1m") _1m("1m"),
        @Json(name = "1h") _1h("1h"),
        @Json(name = "1d") _1d("1d");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /** enum for parameter sources */
    enum class SourcesUsageImages(val value: kotlin.String) {
        @Json(name = "image.generation") generation("image.generation"),
        @Json(name = "image.edit") edit("image.edit"),
        @Json(name = "image.variation") variation("image.variation");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /** enum for parameter sizes */
    enum class SizesUsageImages(val value: kotlin.String) {
        @Json(name = "256x256") _256x256("256x256"),
        @Json(name = "512x512") _512x512("512x512"),
        @Json(name = "1024x1024") _1024x1024("1024x1024"),
        @Json(name = "1792x1792") _1792x1792("1792x1792"),
        @Json(name = "1024x1792") _1024x1792("1024x1792");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /** enum for parameter groupBy */
    enum class GroupByUsageImages(val value: kotlin.String) {
        @Json(name = "project_id") project_id("project_id"),
        @Json(name = "user_id") user_id("user_id"),
        @Json(name = "api_key_id") api_key_id("api_key_id"),
        @Json(name = "model") model("model"),
        @Json(name = "size") size("size"),
        @Json(name = "source") source("source");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /**
     * Get images usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param sources Return only usages for these sources. Possible values are
     *   &#x60;image.generation&#x60;, &#x60;image.edit&#x60;,
     *   &#x60;image.variation&#x60; or any combination of them. (optional)
     * @param sizes Return only usages for these image sizes. Possible values
     *   are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;,
     *   &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of
     *   them. (optional)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;,
     *   &#x60;source&#x60; or any combination of them. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return UsageResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun usageImages(
        startTime: kotlin.Int,
        endTime: kotlin.Int? = null,
        bucketWidth: BucketWidthUsageImages? = BucketWidthUsageImages._1d,
        sources: kotlin.collections.List<SourcesUsageImages>? = null,
        sizes: kotlin.collections.List<SizesUsageImages>? = null,
        projectIds: kotlin.collections.List<kotlin.String>? = null,
        userIds: kotlin.collections.List<kotlin.String>? = null,
        apiKeyIds: kotlin.collections.List<kotlin.String>? = null,
        models: kotlin.collections.List<kotlin.String>? = null,
        groupBy: kotlin.collections.List<GroupByUsageImages>? = null,
        limit: kotlin.Int? = null,
        page: kotlin.String? = null,
    ): UsageResponse {
        val localVarResponse =
            usageImagesWithHttpInfo(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                sources = sources,
                sizes = sizes,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as UsageResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Get images usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param sources Return only usages for these sources. Possible values are
     *   &#x60;image.generation&#x60;, &#x60;image.edit&#x60;,
     *   &#x60;image.variation&#x60; or any combination of them. (optional)
     * @param sizes Return only usages for these image sizes. Possible values
     *   are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;,
     *   &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of
     *   them. (optional)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;,
     *   &#x60;source&#x60; or any combination of them. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return ApiResponse<UsageResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usageImagesWithHttpInfo(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageImages?,
        sources: kotlin.collections.List<SourcesUsageImages>?,
        sizes: kotlin.collections.List<SizesUsageImages>?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageImages>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): ApiResponse<UsageResponse?> {
        val localVariableConfig =
            usageImagesRequestConfig(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                sources = sources,
                sizes = sizes,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return request<Unit, UsageResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation usageImages
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param sources Return only usages for these sources. Possible values are
     *   &#x60;image.generation&#x60;, &#x60;image.edit&#x60;,
     *   &#x60;image.variation&#x60; or any combination of them. (optional)
     * @param sizes Return only usages for these image sizes. Possible values
     *   are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;,
     *   &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of
     *   them. (optional)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;,
     *   &#x60;source&#x60; or any combination of them. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return RequestConfig
     */
    fun usageImagesRequestConfig(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageImages?,
        sources: kotlin.collections.List<SourcesUsageImages>?,
        sizes: kotlin.collections.List<SizesUsageImages>?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageImages>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    put("start_time", listOf(startTime.toString()))
                    if (endTime != null) {
                        put("end_time", listOf(endTime.toString()))
                    }
                    if (bucketWidth != null) {
                        put("bucket_width", listOf(bucketWidth.value))
                    }
                    if (sources != null) {
                        put("sources", toMultiValue(sources.toList(), "multi"))
                    }
                    if (sizes != null) {
                        put("sizes", toMultiValue(sizes.toList(), "multi"))
                    }
                    if (projectIds != null) {
                        put(
                            "project_ids",
                            toMultiValue(projectIds.toList(), "multi"),
                        )
                    }
                    if (userIds != null) {
                        put("user_ids", toMultiValue(userIds.toList(), "multi"))
                    }
                    if (apiKeyIds != null) {
                        put(
                            "api_key_ids",
                            toMultiValue(apiKeyIds.toList(), "multi"),
                        )
                    }
                    if (models != null) {
                        put("models", toMultiValue(models.toList(), "multi"))
                    }
                    if (groupBy != null) {
                        put("group_by", toMultiValue(groupBy.toList(), "multi"))
                    }
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (page != null) {
                        put("page", listOf(page.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organization/usage/images",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /** enum for parameter bucketWidth */
    enum class BucketWidthUsageModerations(val value: kotlin.String) {
        @Json(name = "1m") _1m("1m"),
        @Json(name = "1h") _1h("1h"),
        @Json(name = "1d") _1d("1d");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /** enum for parameter groupBy */
    enum class GroupByUsageModerations(val value: kotlin.String) {
        @Json(name = "project_id") project_id("project_id"),
        @Json(name = "user_id") user_id("user_id"),
        @Json(name = "api_key_id") api_key_id("api_key_id"),
        @Json(name = "model") model("model");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /**
     * Get moderations usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return UsageResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun usageModerations(
        startTime: kotlin.Int,
        endTime: kotlin.Int? = null,
        bucketWidth: BucketWidthUsageModerations? =
            BucketWidthUsageModerations._1d,
        projectIds: kotlin.collections.List<kotlin.String>? = null,
        userIds: kotlin.collections.List<kotlin.String>? = null,
        apiKeyIds: kotlin.collections.List<kotlin.String>? = null,
        models: kotlin.collections.List<kotlin.String>? = null,
        groupBy: kotlin.collections.List<GroupByUsageModerations>? = null,
        limit: kotlin.Int? = null,
        page: kotlin.String? = null,
    ): UsageResponse {
        val localVarResponse =
            usageModerationsWithHttpInfo(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as UsageResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Get moderations usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return ApiResponse<UsageResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usageModerationsWithHttpInfo(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageModerations?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageModerations>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): ApiResponse<UsageResponse?> {
        val localVariableConfig =
            usageModerationsRequestConfig(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                userIds = userIds,
                apiKeyIds = apiKeyIds,
                models = models,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return request<Unit, UsageResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation usageModerations
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param userIds Return only usage for these users. (optional)
     * @param apiKeyIds Return only usage for these API keys. (optional)
     * @param models Return only usage for these models. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;,
     *   &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
     *   (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return RequestConfig
     */
    fun usageModerationsRequestConfig(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageModerations?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        userIds: kotlin.collections.List<kotlin.String>?,
        apiKeyIds: kotlin.collections.List<kotlin.String>?,
        models: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageModerations>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    put("start_time", listOf(startTime.toString()))
                    if (endTime != null) {
                        put("end_time", listOf(endTime.toString()))
                    }
                    if (bucketWidth != null) {
                        put("bucket_width", listOf(bucketWidth.value))
                    }
                    if (projectIds != null) {
                        put(
                            "project_ids",
                            toMultiValue(projectIds.toList(), "multi"),
                        )
                    }
                    if (userIds != null) {
                        put("user_ids", toMultiValue(userIds.toList(), "multi"))
                    }
                    if (apiKeyIds != null) {
                        put(
                            "api_key_ids",
                            toMultiValue(apiKeyIds.toList(), "multi"),
                        )
                    }
                    if (models != null) {
                        put("models", toMultiValue(models.toList(), "multi"))
                    }
                    if (groupBy != null) {
                        put("group_by", toMultiValue(groupBy.toList(), "multi"))
                    }
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (page != null) {
                        put("page", listOf(page.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organization/usage/moderations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /** enum for parameter bucketWidth */
    enum class BucketWidthUsageVectorStores(val value: kotlin.String) {
        @Json(name = "1m") _1m("1m"),
        @Json(name = "1h") _1h("1h"),
        @Json(name = "1d") _1d("1d");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /** enum for parameter groupBy */
    enum class GroupByUsageVectorStores(val value: kotlin.String) {
        @Json(name = "project_id") project_id("project_id");

        /**
         * Override [toString()] to avoid using the enum variable name as the
         * value, and instead use the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are
         * different, and ensures that the client sends the correct enum values
         * to the server always.
         */
        override fun toString(): kotlin.String = "$value"
    }

    /**
     * Get vector stores usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return UsageResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun usageVectorStores(
        startTime: kotlin.Int,
        endTime: kotlin.Int? = null,
        bucketWidth: BucketWidthUsageVectorStores? =
            BucketWidthUsageVectorStores._1d,
        projectIds: kotlin.collections.List<kotlin.String>? = null,
        groupBy: kotlin.collections.List<GroupByUsageVectorStores>? = null,
        limit: kotlin.Int? = null,
        page: kotlin.String? = null,
    ): UsageResponse {
        val localVarResponse =
            usageVectorStoresWithHttpInfo(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as UsageResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Get vector stores usage details for the organization.
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return ApiResponse<UsageResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usageVectorStoresWithHttpInfo(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageVectorStores?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageVectorStores>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): ApiResponse<UsageResponse?> {
        val localVariableConfig =
            usageVectorStoresRequestConfig(
                startTime = startTime,
                endTime = endTime,
                bucketWidth = bucketWidth,
                projectIds = projectIds,
                groupBy = groupBy,
                limit = limit,
                page = page,
            )

        return request<Unit, UsageResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation usageVectorStores
     *
     * @param startTime Start time (Unix seconds) of the query time range,
     *   inclusive.
     * @param endTime End time (Unix seconds) of the query time range,
     *   exclusive. (optional)
     * @param bucketWidth Width of each time bucket in response. Currently
     *   &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported,
     *   default to &#x60;1d&#x60;. (optional, default to 1d)
     * @param projectIds Return only usage for these projects. (optional)
     * @param groupBy Group the usage data by the specified fields. Support
     *   fields include &#x60;project_id&#x60;. (optional)
     * @param limit Specifies the number of buckets to return. -
     *   &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 -
     *   &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 -
     *   &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 (optional)
     * @param page A cursor for use in pagination. Corresponding to the
     *   &#x60;next_page&#x60; field from the previous response. (optional)
     * @return RequestConfig
     */
    fun usageVectorStoresRequestConfig(
        startTime: kotlin.Int,
        endTime: kotlin.Int?,
        bucketWidth: BucketWidthUsageVectorStores?,
        projectIds: kotlin.collections.List<kotlin.String>?,
        groupBy: kotlin.collections.List<GroupByUsageVectorStores>?,
        limit: kotlin.Int?,
        page: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    put("start_time", listOf(startTime.toString()))
                    if (endTime != null) {
                        put("end_time", listOf(endTime.toString()))
                    }
                    if (bucketWidth != null) {
                        put("bucket_width", listOf(bucketWidth.value))
                    }
                    if (projectIds != null) {
                        put(
                            "project_ids",
                            toMultiValue(projectIds.toList(), "multi"),
                        )
                    }
                    if (groupBy != null) {
                        put("group_by", toMultiValue(groupBy.toList(), "multi"))
                    }
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (page != null) {
                        put("page", listOf(page.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organization/usage/vector_stores",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder()
            .scheme("http")
            .host("localhost")
            .addPathSegment(uriComponent)
            .build()
            .encodedPathSegments[0]
}
