/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.openai.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.openai.models.RealtimeSessionCreateRequest
import com.openai.models.RealtimeSessionCreateResponse

import com.squareup.moshi.Json

import com.openai.infrastructure.ApiClient
import com.openai.infrastructure.ApiResponse
import com.openai.infrastructure.ClientException
import com.openai.infrastructure.ClientError
import com.openai.infrastructure.ServerException
import com.openai.infrastructure.ServerError
import com.openai.infrastructure.MultiValueMap
import com.openai.infrastructure.PartConfig
import com.openai.infrastructure.RequestConfig
import com.openai.infrastructure.RequestMethod
import com.openai.infrastructure.ResponseType
import com.openai.infrastructure.Success
import com.openai.infrastructure.toMultiValue

class RealtimeApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.openai.com/v1")
        }
    }

    /**
     * Create an ephemeral API token for use in client-side applications with the Realtime API. Can be configured with the same session parameters as the &#x60;session.update&#x60; client event.  It responds with a session object, plus a &#x60;client_secret&#x60; key which contains a usable ephemeral API token that can be used to authenticate browser clients for the Realtime API. 
     * 
     * @param realtimeSessionCreateRequest Create an ephemeral API key with the given session configuration.
     * @return RealtimeSessionCreateResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createRealtimeSession(realtimeSessionCreateRequest: RealtimeSessionCreateRequest) : RealtimeSessionCreateResponse {
        val localVarResponse = createRealtimeSessionWithHttpInfo(realtimeSessionCreateRequest = realtimeSessionCreateRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RealtimeSessionCreateResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create an ephemeral API token for use in client-side applications with the Realtime API. Can be configured with the same session parameters as the &#x60;session.update&#x60; client event.  It responds with a session object, plus a &#x60;client_secret&#x60; key which contains a usable ephemeral API token that can be used to authenticate browser clients for the Realtime API. 
     * 
     * @param realtimeSessionCreateRequest Create an ephemeral API key with the given session configuration.
     * @return ApiResponse<RealtimeSessionCreateResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createRealtimeSessionWithHttpInfo(realtimeSessionCreateRequest: RealtimeSessionCreateRequest) : ApiResponse<RealtimeSessionCreateResponse?> {
        val localVariableConfig = createRealtimeSessionRequestConfig(realtimeSessionCreateRequest = realtimeSessionCreateRequest)

        return request<RealtimeSessionCreateRequest, RealtimeSessionCreateResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createRealtimeSession
     *
     * @param realtimeSessionCreateRequest Create an ephemeral API key with the given session configuration.
     * @return RequestConfig
     */
    fun createRealtimeSessionRequestConfig(realtimeSessionCreateRequest: RealtimeSessionCreateRequest) : RequestConfig<RealtimeSessionCreateRequest> {
        val localVariableBody = realtimeSessionCreateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/realtime/sessions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
