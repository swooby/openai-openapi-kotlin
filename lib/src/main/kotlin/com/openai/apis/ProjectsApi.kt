/**
 * Please note: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). Do not edit this file manually.
 */
@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package com.openai.apis

import com.openai.infrastructure.ApiClient
import com.openai.infrastructure.ApiResponse
import com.openai.infrastructure.ClientError
import com.openai.infrastructure.ClientException
import com.openai.infrastructure.MultiValueMap
import com.openai.infrastructure.RequestConfig
import com.openai.infrastructure.RequestMethod
import com.openai.infrastructure.ResponseType
import com.openai.infrastructure.ServerError
import com.openai.infrastructure.ServerException
import com.openai.infrastructure.Success
import com.openai.models.Project
import com.openai.models.ProjectApiKey
import com.openai.models.ProjectApiKeyDeleteResponse
import com.openai.models.ProjectApiKeyListResponse
import com.openai.models.ProjectCreateRequest
import com.openai.models.ProjectListResponse
import com.openai.models.ProjectRateLimit
import com.openai.models.ProjectRateLimitListResponse
import com.openai.models.ProjectRateLimitUpdateRequest
import com.openai.models.ProjectServiceAccount
import com.openai.models.ProjectServiceAccountCreateRequest
import com.openai.models.ProjectServiceAccountCreateResponse
import com.openai.models.ProjectServiceAccountDeleteResponse
import com.openai.models.ProjectServiceAccountListResponse
import com.openai.models.ProjectUpdateRequest
import com.openai.models.ProjectUser
import com.openai.models.ProjectUserCreateRequest
import com.openai.models.ProjectUserDeleteResponse
import com.openai.models.ProjectUserListResponse
import com.openai.models.ProjectUserUpdateRequest
import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

class ProjectsApi(
    basePath: kotlin.String = defaultBasePath,
    client: Call.Factory = ApiClient.defaultClient,
) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties()
                .getProperty(ApiClient.baseUrlKey, "https://api.openai.com/v1")
        }
    }

    /**
     * Archives a project in the organization. Archived projects cannot be used
     * or updated.
     *
     * @param projectId The ID of the project.
     * @return Project
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun archiveProject(projectId: kotlin.String): Project {
        val localVarResponse = archiveProjectWithHttpInfo(projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as Project
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Archives a project in the organization. Archived projects cannot be used
     * or updated.
     *
     * @param projectId The ID of the project.
     * @return ApiResponse<Project?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun archiveProjectWithHttpInfo(
        projectId: kotlin.String
    ): ApiResponse<Project?> {
        val localVariableConfig =
            archiveProjectRequestConfig(projectId = projectId)

        return request<Unit, Project>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation archiveProject
     *
     * @param projectId The ID of the project.
     * @return RequestConfig
     */
    fun archiveProjectRequestConfig(
        projectId: kotlin.String
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path =
                "/organization/projects/{project_id}/archive"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Create a new project in the organization. Projects can be created and
     * archived, but cannot be deleted.
     *
     * @param projectCreateRequest The project create request payload.
     * @return Project
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun createProject(projectCreateRequest: ProjectCreateRequest): Project {
        val localVarResponse =
            createProjectWithHttpInfo(
                projectCreateRequest = projectCreateRequest
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as Project
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Create a new project in the organization. Projects can be created and
     * archived, but cannot be deleted.
     *
     * @param projectCreateRequest The project create request payload.
     * @return ApiResponse<Project?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createProjectWithHttpInfo(
        projectCreateRequest: ProjectCreateRequest
    ): ApiResponse<Project?> {
        val localVariableConfig =
            createProjectRequestConfig(
                projectCreateRequest = projectCreateRequest
            )

        return request<ProjectCreateRequest, Project>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation createProject
     *
     * @param projectCreateRequest The project create request payload.
     * @return RequestConfig
     */
    fun createProjectRequestConfig(
        projectCreateRequest: ProjectCreateRequest
    ): RequestConfig<ProjectCreateRequest> {
        val localVariableBody = projectCreateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/organization/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Creates a new service account in the project. This also returns an
     * unredacted API key for the service account.
     *
     * @param projectId The ID of the project.
     * @param projectServiceAccountCreateRequest The project service account
     *   create request payload.
     * @return ProjectServiceAccountCreateResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun createProjectServiceAccount(
        projectId: kotlin.String,
        projectServiceAccountCreateRequest: ProjectServiceAccountCreateRequest,
    ): ProjectServiceAccountCreateResponse {
        val localVarResponse =
            createProjectServiceAccountWithHttpInfo(
                projectId = projectId,
                projectServiceAccountCreateRequest =
                    projectServiceAccountCreateRequest,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data
                    as ProjectServiceAccountCreateResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Creates a new service account in the project. This also returns an
     * unredacted API key for the service account.
     *
     * @param projectId The ID of the project.
     * @param projectServiceAccountCreateRequest The project service account
     *   create request payload.
     * @return ApiResponse<ProjectServiceAccountCreateResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createProjectServiceAccountWithHttpInfo(
        projectId: kotlin.String,
        projectServiceAccountCreateRequest: ProjectServiceAccountCreateRequest,
    ): ApiResponse<ProjectServiceAccountCreateResponse?> {
        val localVariableConfig =
            createProjectServiceAccountRequestConfig(
                projectId = projectId,
                projectServiceAccountCreateRequest =
                    projectServiceAccountCreateRequest,
            )

        return request<
            ProjectServiceAccountCreateRequest,
            ProjectServiceAccountCreateResponse,
        >(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createProjectServiceAccount
     *
     * @param projectId The ID of the project.
     * @param projectServiceAccountCreateRequest The project service account
     *   create request payload.
     * @return RequestConfig
     */
    fun createProjectServiceAccountRequestConfig(
        projectId: kotlin.String,
        projectServiceAccountCreateRequest: ProjectServiceAccountCreateRequest,
    ): RequestConfig<ProjectServiceAccountCreateRequest> {
        val localVariableBody = projectServiceAccountCreateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path =
                "/organization/projects/{project_id}/service_accounts"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Adds a user to the project. Users must already be members of the
     * organization to be added to a project.
     *
     * @param projectId The ID of the project.
     * @param projectUserCreateRequest The project user create request payload.
     * @return ProjectUser
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun createProjectUser(
        projectId: kotlin.String,
        projectUserCreateRequest: ProjectUserCreateRequest,
    ): ProjectUser {
        val localVarResponse =
            createProjectUserWithHttpInfo(
                projectId = projectId,
                projectUserCreateRequest = projectUserCreateRequest,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as ProjectUser
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Adds a user to the project. Users must already be members of the
     * organization to be added to a project.
     *
     * @param projectId The ID of the project.
     * @param projectUserCreateRequest The project user create request payload.
     * @return ApiResponse<ProjectUser?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createProjectUserWithHttpInfo(
        projectId: kotlin.String,
        projectUserCreateRequest: ProjectUserCreateRequest,
    ): ApiResponse<ProjectUser?> {
        val localVariableConfig =
            createProjectUserRequestConfig(
                projectId = projectId,
                projectUserCreateRequest = projectUserCreateRequest,
            )

        return request<ProjectUserCreateRequest, ProjectUser>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createProjectUser
     *
     * @param projectId The ID of the project.
     * @param projectUserCreateRequest The project user create request payload.
     * @return RequestConfig
     */
    fun createProjectUserRequestConfig(
        projectId: kotlin.String,
        projectUserCreateRequest: ProjectUserCreateRequest,
    ): RequestConfig<ProjectUserCreateRequest> {
        val localVariableBody = projectUserCreateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path =
                "/organization/projects/{project_id}/users"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Deletes an API key from the project.
     *
     * @param projectId The ID of the project.
     * @param keyId The ID of the API key.
     * @return ProjectApiKeyDeleteResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun deleteProjectApiKey(
        projectId: kotlin.String,
        keyId: kotlin.String,
    ): ProjectApiKeyDeleteResponse {
        val localVarResponse =
            deleteProjectApiKeyWithHttpInfo(
                projectId = projectId,
                keyId = keyId,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data
                    as ProjectApiKeyDeleteResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Deletes an API key from the project.
     *
     * @param projectId The ID of the project.
     * @param keyId The ID of the API key.
     * @return ApiResponse<ProjectApiKeyDeleteResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteProjectApiKeyWithHttpInfo(
        projectId: kotlin.String,
        keyId: kotlin.String,
    ): ApiResponse<ProjectApiKeyDeleteResponse?> {
        val localVariableConfig =
            deleteProjectApiKeyRequestConfig(
                projectId = projectId,
                keyId = keyId,
            )

        return request<Unit, ProjectApiKeyDeleteResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation deleteProjectApiKey
     *
     * @param projectId The ID of the project.
     * @param keyId The ID of the API key.
     * @return RequestConfig
     */
    fun deleteProjectApiKeyRequestConfig(
        projectId: kotlin.String,
        keyId: kotlin.String,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path =
                "/organization/projects/{project_id}/api_keys/{key_id}"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    )
                    .replace(
                        "{" + "key_id" + "}",
                        encodeURIComponent(keyId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Deletes a service account from the project.
     *
     * @param projectId The ID of the project.
     * @param serviceAccountId The ID of the service account.
     * @return ProjectServiceAccountDeleteResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun deleteProjectServiceAccount(
        projectId: kotlin.String,
        serviceAccountId: kotlin.String,
    ): ProjectServiceAccountDeleteResponse {
        val localVarResponse =
            deleteProjectServiceAccountWithHttpInfo(
                projectId = projectId,
                serviceAccountId = serviceAccountId,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data
                    as ProjectServiceAccountDeleteResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Deletes a service account from the project.
     *
     * @param projectId The ID of the project.
     * @param serviceAccountId The ID of the service account.
     * @return ApiResponse<ProjectServiceAccountDeleteResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteProjectServiceAccountWithHttpInfo(
        projectId: kotlin.String,
        serviceAccountId: kotlin.String,
    ): ApiResponse<ProjectServiceAccountDeleteResponse?> {
        val localVariableConfig =
            deleteProjectServiceAccountRequestConfig(
                projectId = projectId,
                serviceAccountId = serviceAccountId,
            )

        return request<Unit, ProjectServiceAccountDeleteResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteProjectServiceAccount
     *
     * @param projectId The ID of the project.
     * @param serviceAccountId The ID of the service account.
     * @return RequestConfig
     */
    fun deleteProjectServiceAccountRequestConfig(
        projectId: kotlin.String,
        serviceAccountId: kotlin.String,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path =
                "/organization/projects/{project_id}/service_accounts/{service_account_id}"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    )
                    .replace(
                        "{" + "service_account_id" + "}",
                        encodeURIComponent(serviceAccountId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Deletes a user from the project.
     *
     * @param projectId The ID of the project.
     * @param userId The ID of the user.
     * @return ProjectUserDeleteResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun deleteProjectUser(
        projectId: kotlin.String,
        userId: kotlin.String,
    ): ProjectUserDeleteResponse {
        val localVarResponse =
            deleteProjectUserWithHttpInfo(
                projectId = projectId,
                userId = userId,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data
                    as ProjectUserDeleteResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Deletes a user from the project.
     *
     * @param projectId The ID of the project.
     * @param userId The ID of the user.
     * @return ApiResponse<ProjectUserDeleteResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteProjectUserWithHttpInfo(
        projectId: kotlin.String,
        userId: kotlin.String,
    ): ApiResponse<ProjectUserDeleteResponse?> {
        val localVariableConfig =
            deleteProjectUserRequestConfig(
                projectId = projectId,
                userId = userId,
            )

        return request<Unit, ProjectUserDeleteResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation deleteProjectUser
     *
     * @param projectId The ID of the project.
     * @param userId The ID of the user.
     * @return RequestConfig
     */
    fun deleteProjectUserRequestConfig(
        projectId: kotlin.String,
        userId: kotlin.String,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path =
                "/organization/projects/{project_id}/users/{user_id}"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    )
                    .replace(
                        "{" + "user_id" + "}",
                        encodeURIComponent(userId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Returns a list of API keys in the project.
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @return ProjectApiKeyListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun listProjectApiKeys(
        projectId: kotlin.String,
        limit: kotlin.Int? = 20,
        after: kotlin.String? = null,
    ): ProjectApiKeyListResponse {
        val localVarResponse =
            listProjectApiKeysWithHttpInfo(
                projectId = projectId,
                limit = limit,
                after = after,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data
                    as ProjectApiKeyListResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Returns a list of API keys in the project.
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @return ApiResponse<ProjectApiKeyListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listProjectApiKeysWithHttpInfo(
        projectId: kotlin.String,
        limit: kotlin.Int?,
        after: kotlin.String?,
    ): ApiResponse<ProjectApiKeyListResponse?> {
        val localVariableConfig =
            listProjectApiKeysRequestConfig(
                projectId = projectId,
                limit = limit,
                after = after,
            )

        return request<Unit, ProjectApiKeyListResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation listProjectApiKeys
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @return RequestConfig
     */
    fun listProjectApiKeysRequestConfig(
        projectId: kotlin.String,
        limit: kotlin.Int?,
        after: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (after != null) {
                        put("after", listOf(after.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path =
                "/organization/projects/{project_id}/api_keys"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Returns the rate limits per model for a project.
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. The default
     *   is 100. (optional, default to 100)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, beginning with obj_foo,
     *   your subsequent call can include before&#x3D;obj_foo in order to fetch
     *   the previous page of the list. (optional)
     * @return ProjectRateLimitListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun listProjectRateLimits(
        projectId: kotlin.String,
        limit: kotlin.Int? = 100,
        after: kotlin.String? = null,
        before: kotlin.String? = null,
    ): ProjectRateLimitListResponse {
        val localVarResponse =
            listProjectRateLimitsWithHttpInfo(
                projectId = projectId,
                limit = limit,
                after = after,
                before = before,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data
                    as ProjectRateLimitListResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Returns the rate limits per model for a project.
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. The default
     *   is 100. (optional, default to 100)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, beginning with obj_foo,
     *   your subsequent call can include before&#x3D;obj_foo in order to fetch
     *   the previous page of the list. (optional)
     * @return ApiResponse<ProjectRateLimitListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listProjectRateLimitsWithHttpInfo(
        projectId: kotlin.String,
        limit: kotlin.Int?,
        after: kotlin.String?,
        before: kotlin.String?,
    ): ApiResponse<ProjectRateLimitListResponse?> {
        val localVariableConfig =
            listProjectRateLimitsRequestConfig(
                projectId = projectId,
                limit = limit,
                after = after,
                before = before,
            )

        return request<Unit, ProjectRateLimitListResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation listProjectRateLimits
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. The default
     *   is 100. (optional, default to 100)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, beginning with obj_foo,
     *   your subsequent call can include before&#x3D;obj_foo in order to fetch
     *   the previous page of the list. (optional)
     * @return RequestConfig
     */
    fun listProjectRateLimitsRequestConfig(
        projectId: kotlin.String,
        limit: kotlin.Int?,
        after: kotlin.String?,
        before: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (after != null) {
                        put("after", listOf(after.toString()))
                    }
                    if (before != null) {
                        put("before", listOf(before.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path =
                "/organization/projects/{project_id}/rate_limits"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Returns a list of service accounts in the project.
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @return ProjectServiceAccountListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun listProjectServiceAccounts(
        projectId: kotlin.String,
        limit: kotlin.Int? = 20,
        after: kotlin.String? = null,
    ): ProjectServiceAccountListResponse {
        val localVarResponse =
            listProjectServiceAccountsWithHttpInfo(
                projectId = projectId,
                limit = limit,
                after = after,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data
                    as ProjectServiceAccountListResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Returns a list of service accounts in the project.
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @return ApiResponse<ProjectServiceAccountListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listProjectServiceAccountsWithHttpInfo(
        projectId: kotlin.String,
        limit: kotlin.Int?,
        after: kotlin.String?,
    ): ApiResponse<ProjectServiceAccountListResponse?> {
        val localVariableConfig =
            listProjectServiceAccountsRequestConfig(
                projectId = projectId,
                limit = limit,
                after = after,
            )

        return request<Unit, ProjectServiceAccountListResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listProjectServiceAccounts
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @return RequestConfig
     */
    fun listProjectServiceAccountsRequestConfig(
        projectId: kotlin.String,
        limit: kotlin.Int?,
        after: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (after != null) {
                        put("after", listOf(after.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path =
                "/organization/projects/{project_id}/service_accounts"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Returns a list of users in the project.
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @return ProjectUserListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun listProjectUsers(
        projectId: kotlin.String,
        limit: kotlin.Int? = 20,
        after: kotlin.String? = null,
    ): ProjectUserListResponse {
        val localVarResponse =
            listProjectUsersWithHttpInfo(
                projectId = projectId,
                limit = limit,
                after = after,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as ProjectUserListResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Returns a list of users in the project.
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @return ApiResponse<ProjectUserListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listProjectUsersWithHttpInfo(
        projectId: kotlin.String,
        limit: kotlin.Int?,
        after: kotlin.String?,
    ): ApiResponse<ProjectUserListResponse?> {
        val localVariableConfig =
            listProjectUsersRequestConfig(
                projectId = projectId,
                limit = limit,
                after = after,
            )

        return request<Unit, ProjectUserListResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation listProjectUsers
     *
     * @param projectId The ID of the project.
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @return RequestConfig
     */
    fun listProjectUsersRequestConfig(
        projectId: kotlin.String,
        limit: kotlin.Int?,
        after: kotlin.String?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (after != null) {
                        put("after", listOf(after.toString()))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path =
                "/organization/projects/{project_id}/users"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Returns a list of projects.
     *
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @param includeArchived If &#x60;true&#x60; returns all projects including
     *   those that have been &#x60;archived&#x60;. Archived projects are not
     *   included by default. (optional, default to false)
     * @return ProjectListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun listProjects(
        limit: kotlin.Int? = 20,
        after: kotlin.String? = null,
        includeArchived: kotlin.Boolean? = false,
    ): ProjectListResponse {
        val localVarResponse =
            listProjectsWithHttpInfo(
                limit = limit,
                after = after,
                includeArchived = includeArchived,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as ProjectListResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Returns a list of projects.
     *
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @param includeArchived If &#x60;true&#x60; returns all projects including
     *   those that have been &#x60;archived&#x60;. Archived projects are not
     *   included by default. (optional, default to false)
     * @return ApiResponse<ProjectListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listProjectsWithHttpInfo(
        limit: kotlin.Int?,
        after: kotlin.String?,
        includeArchived: kotlin.Boolean?,
    ): ApiResponse<ProjectListResponse?> {
        val localVariableConfig =
            listProjectsRequestConfig(
                limit = limit,
                after = after,
                includeArchived = includeArchived,
            )

        return request<Unit, ProjectListResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation listProjects
     *
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @param includeArchived If &#x60;true&#x60; returns all projects including
     *   those that have been &#x60;archived&#x60;. Archived projects are not
     *   included by default. (optional, default to false)
     * @return RequestConfig
     */
    fun listProjectsRequestConfig(
        limit: kotlin.Int?,
        after: kotlin.String?,
        includeArchived: kotlin.Boolean?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (after != null) {
                        put("after", listOf(after.toString()))
                    }
                    if (includeArchived != null) {
                        put(
                            "include_archived",
                            listOf(includeArchived.toString()),
                        )
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organization/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Modifies a project in the organization.
     *
     * @param projectId The ID of the project.
     * @param projectUpdateRequest The project update request payload.
     * @return Project
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun modifyProject(
        projectId: kotlin.String,
        projectUpdateRequest: ProjectUpdateRequest,
    ): Project {
        val localVarResponse =
            modifyProjectWithHttpInfo(
                projectId = projectId,
                projectUpdateRequest = projectUpdateRequest,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as Project
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Modifies a project in the organization.
     *
     * @param projectId The ID of the project.
     * @param projectUpdateRequest The project update request payload.
     * @return ApiResponse<Project?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun modifyProjectWithHttpInfo(
        projectId: kotlin.String,
        projectUpdateRequest: ProjectUpdateRequest,
    ): ApiResponse<Project?> {
        val localVariableConfig =
            modifyProjectRequestConfig(
                projectId = projectId,
                projectUpdateRequest = projectUpdateRequest,
            )

        return request<ProjectUpdateRequest, Project>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation modifyProject
     *
     * @param projectId The ID of the project.
     * @param projectUpdateRequest The project update request payload.
     * @return RequestConfig
     */
    fun modifyProjectRequestConfig(
        projectId: kotlin.String,
        projectUpdateRequest: ProjectUpdateRequest,
    ): RequestConfig<ProjectUpdateRequest> {
        val localVariableBody = projectUpdateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path =
                "/organization/projects/{project_id}"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Modifies a user&#39;s role in the project.
     *
     * @param projectId The ID of the project.
     * @param userId The ID of the user.
     * @param projectUserUpdateRequest The project user update request payload.
     * @return ProjectUser
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun modifyProjectUser(
        projectId: kotlin.String,
        userId: kotlin.String,
        projectUserUpdateRequest: ProjectUserUpdateRequest,
    ): ProjectUser {
        val localVarResponse =
            modifyProjectUserWithHttpInfo(
                projectId = projectId,
                userId = userId,
                projectUserUpdateRequest = projectUserUpdateRequest,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as ProjectUser
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Modifies a user&#39;s role in the project.
     *
     * @param projectId The ID of the project.
     * @param userId The ID of the user.
     * @param projectUserUpdateRequest The project user update request payload.
     * @return ApiResponse<ProjectUser?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun modifyProjectUserWithHttpInfo(
        projectId: kotlin.String,
        userId: kotlin.String,
        projectUserUpdateRequest: ProjectUserUpdateRequest,
    ): ApiResponse<ProjectUser?> {
        val localVariableConfig =
            modifyProjectUserRequestConfig(
                projectId = projectId,
                userId = userId,
                projectUserUpdateRequest = projectUserUpdateRequest,
            )

        return request<ProjectUserUpdateRequest, ProjectUser>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation modifyProjectUser
     *
     * @param projectId The ID of the project.
     * @param userId The ID of the user.
     * @param projectUserUpdateRequest The project user update request payload.
     * @return RequestConfig
     */
    fun modifyProjectUserRequestConfig(
        projectId: kotlin.String,
        userId: kotlin.String,
        projectUserUpdateRequest: ProjectUserUpdateRequest,
    ): RequestConfig<ProjectUserUpdateRequest> {
        val localVariableBody = projectUserUpdateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path =
                "/organization/projects/{project_id}/users/{user_id}"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    )
                    .replace(
                        "{" + "user_id" + "}",
                        encodeURIComponent(userId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Retrieves a project.
     *
     * @param projectId The ID of the project.
     * @return Project
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun retrieveProject(projectId: kotlin.String): Project {
        val localVarResponse =
            retrieveProjectWithHttpInfo(projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as Project
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Retrieves a project.
     *
     * @param projectId The ID of the project.
     * @return ApiResponse<Project?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveProjectWithHttpInfo(
        projectId: kotlin.String
    ): ApiResponse<Project?> {
        val localVariableConfig =
            retrieveProjectRequestConfig(projectId = projectId)

        return request<Unit, Project>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation retrieveProject
     *
     * @param projectId The ID of the project.
     * @return RequestConfig
     */
    fun retrieveProjectRequestConfig(
        projectId: kotlin.String
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path =
                "/organization/projects/{project_id}"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Retrieves an API key in the project.
     *
     * @param projectId The ID of the project.
     * @param keyId The ID of the API key.
     * @return ProjectApiKey
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun retrieveProjectApiKey(
        projectId: kotlin.String,
        keyId: kotlin.String,
    ): ProjectApiKey {
        val localVarResponse =
            retrieveProjectApiKeyWithHttpInfo(
                projectId = projectId,
                keyId = keyId,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as ProjectApiKey
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Retrieves an API key in the project.
     *
     * @param projectId The ID of the project.
     * @param keyId The ID of the API key.
     * @return ApiResponse<ProjectApiKey?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveProjectApiKeyWithHttpInfo(
        projectId: kotlin.String,
        keyId: kotlin.String,
    ): ApiResponse<ProjectApiKey?> {
        val localVariableConfig =
            retrieveProjectApiKeyRequestConfig(
                projectId = projectId,
                keyId = keyId,
            )

        return request<Unit, ProjectApiKey>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation retrieveProjectApiKey
     *
     * @param projectId The ID of the project.
     * @param keyId The ID of the API key.
     * @return RequestConfig
     */
    fun retrieveProjectApiKeyRequestConfig(
        projectId: kotlin.String,
        keyId: kotlin.String,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path =
                "/organization/projects/{project_id}/api_keys/{key_id}"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    )
                    .replace(
                        "{" + "key_id" + "}",
                        encodeURIComponent(keyId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Retrieves a service account in the project.
     *
     * @param projectId The ID of the project.
     * @param serviceAccountId The ID of the service account.
     * @return ProjectServiceAccount
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun retrieveProjectServiceAccount(
        projectId: kotlin.String,
        serviceAccountId: kotlin.String,
    ): ProjectServiceAccount {
        val localVarResponse =
            retrieveProjectServiceAccountWithHttpInfo(
                projectId = projectId,
                serviceAccountId = serviceAccountId,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as ProjectServiceAccount
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Retrieves a service account in the project.
     *
     * @param projectId The ID of the project.
     * @param serviceAccountId The ID of the service account.
     * @return ApiResponse<ProjectServiceAccount?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveProjectServiceAccountWithHttpInfo(
        projectId: kotlin.String,
        serviceAccountId: kotlin.String,
    ): ApiResponse<ProjectServiceAccount?> {
        val localVariableConfig =
            retrieveProjectServiceAccountRequestConfig(
                projectId = projectId,
                serviceAccountId = serviceAccountId,
            )

        return request<Unit, ProjectServiceAccount>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation
     * retrieveProjectServiceAccount
     *
     * @param projectId The ID of the project.
     * @param serviceAccountId The ID of the service account.
     * @return RequestConfig
     */
    fun retrieveProjectServiceAccountRequestConfig(
        projectId: kotlin.String,
        serviceAccountId: kotlin.String,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path =
                "/organization/projects/{project_id}/service_accounts/{service_account_id}"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    )
                    .replace(
                        "{" + "service_account_id" + "}",
                        encodeURIComponent(serviceAccountId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Retrieves a user in the project.
     *
     * @param projectId The ID of the project.
     * @param userId The ID of the user.
     * @return ProjectUser
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun retrieveProjectUser(
        projectId: kotlin.String,
        userId: kotlin.String,
    ): ProjectUser {
        val localVarResponse =
            retrieveProjectUserWithHttpInfo(
                projectId = projectId,
                userId = userId,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as ProjectUser
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Retrieves a user in the project.
     *
     * @param projectId The ID of the project.
     * @param userId The ID of the user.
     * @return ApiResponse<ProjectUser?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveProjectUserWithHttpInfo(
        projectId: kotlin.String,
        userId: kotlin.String,
    ): ApiResponse<ProjectUser?> {
        val localVariableConfig =
            retrieveProjectUserRequestConfig(
                projectId = projectId,
                userId = userId,
            )

        return request<Unit, ProjectUser>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation retrieveProjectUser
     *
     * @param projectId The ID of the project.
     * @param userId The ID of the user.
     * @return RequestConfig
     */
    fun retrieveProjectUserRequestConfig(
        projectId: kotlin.String,
        userId: kotlin.String,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path =
                "/organization/projects/{project_id}/users/{user_id}"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    )
                    .replace(
                        "{" + "user_id" + "}",
                        encodeURIComponent(userId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Updates a project rate limit.
     *
     * @param projectId The ID of the project.
     * @param rateLimitId The ID of the rate limit.
     * @param projectRateLimitUpdateRequest The project rate limit update
     *   request payload.
     * @return ProjectRateLimit
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun updateProjectRateLimits(
        projectId: kotlin.String,
        rateLimitId: kotlin.String,
        projectRateLimitUpdateRequest: ProjectRateLimitUpdateRequest,
    ): ProjectRateLimit {
        val localVarResponse =
            updateProjectRateLimitsWithHttpInfo(
                projectId = projectId,
                rateLimitId = rateLimitId,
                projectRateLimitUpdateRequest = projectRateLimitUpdateRequest,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as ProjectRateLimit
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Updates a project rate limit.
     *
     * @param projectId The ID of the project.
     * @param rateLimitId The ID of the rate limit.
     * @param projectRateLimitUpdateRequest The project rate limit update
     *   request payload.
     * @return ApiResponse<ProjectRateLimit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateProjectRateLimitsWithHttpInfo(
        projectId: kotlin.String,
        rateLimitId: kotlin.String,
        projectRateLimitUpdateRequest: ProjectRateLimitUpdateRequest,
    ): ApiResponse<ProjectRateLimit?> {
        val localVariableConfig =
            updateProjectRateLimitsRequestConfig(
                projectId = projectId,
                rateLimitId = rateLimitId,
                projectRateLimitUpdateRequest = projectRateLimitUpdateRequest,
            )

        return request<ProjectRateLimitUpdateRequest, ProjectRateLimit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateProjectRateLimits
     *
     * @param projectId The ID of the project.
     * @param rateLimitId The ID of the rate limit.
     * @param projectRateLimitUpdateRequest The project rate limit update
     *   request payload.
     * @return RequestConfig
     */
    fun updateProjectRateLimitsRequestConfig(
        projectId: kotlin.String,
        rateLimitId: kotlin.String,
        projectRateLimitUpdateRequest: ProjectRateLimitUpdateRequest,
    ): RequestConfig<ProjectRateLimitUpdateRequest> {
        val localVariableBody = projectRateLimitUpdateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path =
                "/organization/projects/{project_id}/rate_limits/{rate_limit_id}"
                    .replace(
                        "{" + "project_id" + "}",
                        encodeURIComponent(projectId.toString()),
                    )
                    .replace(
                        "{" + "rate_limit_id" + "}",
                        encodeURIComponent(rateLimitId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder()
            .scheme("http")
            .host("localhost")
            .addPathSegment(uriComponent)
            .build()
            .encodedPathSegments[0]
}
