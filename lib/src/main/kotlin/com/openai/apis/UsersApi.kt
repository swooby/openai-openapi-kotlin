/**
 * Please note: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). Do not edit this file manually.
 */
@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package com.openai.apis

import com.openai.infrastructure.ApiClient
import com.openai.infrastructure.ApiResponse
import com.openai.infrastructure.ClientError
import com.openai.infrastructure.ClientException
import com.openai.infrastructure.MultiValueMap
import com.openai.infrastructure.RequestConfig
import com.openai.infrastructure.RequestMethod
import com.openai.infrastructure.ResponseType
import com.openai.infrastructure.ServerError
import com.openai.infrastructure.ServerException
import com.openai.infrastructure.Success
import com.openai.infrastructure.toMultiValue
import com.openai.models.User
import com.openai.models.UserDeleteResponse
import com.openai.models.UserListResponse
import com.openai.models.UserRoleUpdateRequest
import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

class UsersApi(
    basePath: kotlin.String = defaultBasePath,
    client: Call.Factory = ApiClient.defaultClient,
) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties()
                .getProperty(ApiClient.baseUrlKey, "https://api.openai.com/v1")
        }
    }

    /**
     * Deletes a user from the organization.
     *
     * @param userId The ID of the user.
     * @return UserDeleteResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun deleteUser(userId: kotlin.String): UserDeleteResponse {
        val localVarResponse = deleteUserWithHttpInfo(userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as UserDeleteResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Deletes a user from the organization.
     *
     * @param userId The ID of the user.
     * @return ApiResponse<UserDeleteResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteUserWithHttpInfo(
        userId: kotlin.String
    ): ApiResponse<UserDeleteResponse?> {
        val localVariableConfig = deleteUserRequestConfig(userId = userId)

        return request<Unit, UserDeleteResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation deleteUser
     *
     * @param userId The ID of the user.
     * @return RequestConfig
     */
    fun deleteUserRequestConfig(userId: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path =
                "/organization/users/{user_id}"
                    .replace(
                        "{" + "user_id" + "}",
                        encodeURIComponent(userId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Lists all of the users in the organization.
     *
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @param emails Filter by the email address of users. (optional)
     * @return UserListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun listUsers(
        limit: kotlin.Int? = 20,
        after: kotlin.String? = null,
        emails: kotlin.collections.List<kotlin.String>? = null,
    ): UserListResponse {
        val localVarResponse =
            listUsersWithHttpInfo(limit = limit, after = after, emails = emails)

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as UserListResponse
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Lists all of the users in the organization.
     *
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @param emails Filter by the email address of users. (optional)
     * @return ApiResponse<UserListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUsersWithHttpInfo(
        limit: kotlin.Int?,
        after: kotlin.String?,
        emails: kotlin.collections.List<kotlin.String>?,
    ): ApiResponse<UserListResponse?> {
        val localVariableConfig =
            listUsersRequestConfig(
                limit = limit,
                after = after,
                emails = emails,
            )

        return request<Unit, UserListResponse>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation listUsers
     *
     * @param limit A limit on the number of objects to be returned. Limit can
     *   range between 1 and 100, and the default is 20. (optional, default
     *   to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an
     *   object ID that defines your place in the list. For instance, if you
     *   make a list request and receive 100 objects, ending with obj_foo, your
     *   subsequent call can include after&#x3D;obj_foo in order to fetch the
     *   next page of the list. (optional)
     * @param emails Filter by the email address of users. (optional)
     * @return RequestConfig
     */
    fun listUsersRequestConfig(
        limit: kotlin.Int?,
        after: kotlin.String?,
        emails: kotlin.collections.List<kotlin.String>?,
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<
                    kotlin.String,
                    kotlin.collections.List<kotlin.String>,
                >()
                .apply {
                    if (limit != null) {
                        put("limit", listOf(limit.toString()))
                    }
                    if (after != null) {
                        put("after", listOf(after.toString()))
                    }
                    if (emails != null) {
                        put("emails", toMultiValue(emails.toList(), "multi"))
                    }
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organization/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Modifies a user&#39;s role in the organization.
     *
     * @param userId The ID of the user.
     * @param userRoleUpdateRequest The new user role to modify. This must be
     *   one of &#x60;owner&#x60; or &#x60;member&#x60;.
     * @return User
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun modifyUser(
        userId: kotlin.String,
        userRoleUpdateRequest: UserRoleUpdateRequest,
    ): User {
        val localVarResponse =
            modifyUserWithHttpInfo(
                userId = userId,
                userRoleUpdateRequest = userRoleUpdateRequest,
            )

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as User
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Modifies a user&#39;s role in the organization.
     *
     * @param userId The ID of the user.
     * @param userRoleUpdateRequest The new user role to modify. This must be
     *   one of &#x60;owner&#x60; or &#x60;member&#x60;.
     * @return ApiResponse<User?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun modifyUserWithHttpInfo(
        userId: kotlin.String,
        userRoleUpdateRequest: UserRoleUpdateRequest,
    ): ApiResponse<User?> {
        val localVariableConfig =
            modifyUserRequestConfig(
                userId = userId,
                userRoleUpdateRequest = userRoleUpdateRequest,
            )

        return request<UserRoleUpdateRequest, User>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation modifyUser
     *
     * @param userId The ID of the user.
     * @param userRoleUpdateRequest The new user role to modify. This must be
     *   one of &#x60;owner&#x60; or &#x60;member&#x60;.
     * @return RequestConfig
     */
    fun modifyUserRequestConfig(
        userId: kotlin.String,
        userRoleUpdateRequest: UserRoleUpdateRequest,
    ): RequestConfig<UserRoleUpdateRequest> {
        val localVariableBody = userRoleUpdateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path =
                "/organization/users/{user_id}"
                    .replace(
                        "{" + "user_id" + "}",
                        encodeURIComponent(userId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     * Retrieves a user by their identifier.
     *
     * @param userId The ID of the user.
     * @return User
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational
     *   or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun retrieveUser(userId: kotlin.String): User {
        val localVarResponse = retrieveUserWithHttpInfo(userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success ->
                (localVarResponse as Success<*>).data as User
            ResponseType.Informational ->
                throw UnsupportedOperationException(
                    "Client does not support Informational responses."
                )
            ResponseType.Redirection ->
                throw UnsupportedOperationException(
                    "Client does not support Redirection responses."
                )
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     * Retrieves a user by their identifier.
     *
     * @param userId The ID of the user.
     * @return ApiResponse<User?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveUserWithHttpInfo(userId: kotlin.String): ApiResponse<User?> {
        val localVariableConfig = retrieveUserRequestConfig(userId = userId)

        return request<Unit, User>(localVariableConfig)
    }

    /**
     * To obtain the request config of the operation retrieveUser
     *
     * @param userId The ID of the user.
     * @return RequestConfig
     */
    fun retrieveUserRequestConfig(userId: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path =
                "/organization/users/{user_id}"
                    .replace(
                        "{" + "user_id" + "}",
                        encodeURIComponent(userId.toString()),
                    ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder()
            .scheme("http")
            .host("localhost")
            .addPathSegment(uriComponent)
            .build()
            .encodedPathSegments[0]
}
