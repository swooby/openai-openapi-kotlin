/**
 * Please note: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). Do not edit this file manually.
 */
@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package com.openai.models

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * **o1 and o3-mini models only** Constrains effort on reasoning for
 * [reasoning models](https://platform.openai.com/docs/guides/reasoning).
 * Currently supported values are `low`, `medium`, and `high`. Reducing
 * reasoning effort can result in faster responses and fewer tokens used on
 * reasoning in a response.
 *
 * Values: low,medium,high
 */
@JsonClass(generateAdapter = false)
enum class ReasoningEffort(val value: kotlin.String) {

    @Json(name = "low") low("low"),
    @Json(name = "medium") medium("medium"),
    @Json(name = "high") high("high");

    /**
     * Override [toString()] to avoid using the enum variable name as the value,
     * and instead use the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different,
     * and ensures that the client sends the correct enum values to the server
     * always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null
         * otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? =
            if (data is ReasoningEffort) "$data" else null

        /** Returns a valid [ReasoningEffort] for [data], null otherwise. */
        fun decode(data: kotlin.Any?): ReasoningEffort? =
            data?.let {
                val normalizedData = "$it".lowercase()
                values().firstOrNull { value ->
                    it == value || normalizedData == "$value".lowercase()
                }
            }
    }
}
