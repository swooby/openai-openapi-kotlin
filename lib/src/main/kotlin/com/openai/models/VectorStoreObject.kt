/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.openai.models

import com.openai.models.VectorStoreExpirationAfter
import com.openai.models.VectorStoreObjectFileCounts

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * A vector store is a collection of processed files can be used by the `file_search` tool.
 *
 * @param id The identifier, which can be referenced in API endpoints.
 * @param `object` The object type, which is always `vector_store`.
 * @param createdAt The Unix timestamp (in seconds) for when the vector store was created.
 * @param name The name of the vector store.
 * @param usageBytes The total number of bytes used by the files in the vector store.
 * @param fileCounts 
 * @param status The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
 * @param lastActiveAt The Unix timestamp (in seconds) for when the vector store was last active.
 * @param metadata Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long. 
 * @param expiresAfter 
 * @param expiresAt The Unix timestamp (in seconds) for when the vector store will expire.
 */


data class VectorStoreObject (

    /* The identifier, which can be referenced in API endpoints. */
    @Json(name = "id")
    val id: kotlin.String,

    /* The object type, which is always `vector_store`. */
    @Json(name = "object")
    val `object`: VectorStoreObject.`Object`,

    /* The Unix timestamp (in seconds) for when the vector store was created. */
    @Json(name = "created_at")
    val createdAt: kotlin.Int,

    /* The name of the vector store. */
    @Json(name = "name")
    val name: kotlin.String,

    /* The total number of bytes used by the files in the vector store. */
    @Json(name = "usage_bytes")
    val usageBytes: kotlin.Int,

    @Json(name = "file_counts")
    val fileCounts: VectorStoreObjectFileCounts,

    /* The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use. */
    @Json(name = "status")
    val status: VectorStoreObject.Status,

    /* The Unix timestamp (in seconds) for when the vector store was last active. */
    @Json(name = "last_active_at")
    val lastActiveAt: kotlin.Int?,

    /* Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.  */
    @Json(name = "metadata")
    val metadata: kotlin.Any?,

    @Json(name = "expires_after")
    val expiresAfter: VectorStoreExpirationAfter? = null,

    /* The Unix timestamp (in seconds) for when the vector store will expire. */
    @Json(name = "expires_at")
    val expiresAt: kotlin.Int? = null

) {

    /**
     * The object type, which is always `vector_store`.
     *
     * Values: vector_store
     */
    @JsonClass(generateAdapter = false)
    enum class `Object`(val value: kotlin.String) {
        @Json(name = "vector_store") vector_store("vector_store");
    }
    /**
     * The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
     *
     * Values: expired,in_progress,completed
     */
    @JsonClass(generateAdapter = false)
    enum class Status(val value: kotlin.String) {
        @Json(name = "expired") expired("expired"),
        @Json(name = "in_progress") in_progress("in_progress"),
        @Json(name = "completed") completed("completed");
    }

}

