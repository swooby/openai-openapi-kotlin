/**
 * Please note: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). Do not edit this file manually.
 */
@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package com.openai.models

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Add a new Item to the Conversation's context, including messages, function
 * calls, and function call responses. This event can be used both to populate a
 * \"history\" of the conversation and to add new items mid-stream, but has the
 * current limitation that it cannot populate assistant audio messages. If
 * successful, the server will respond with a `conversation.item.created` event,
 * otherwise an `error` event will be sent.
 *
 * @param type The event type, must be `conversation.item.create`.
 * @param item
 * @param eventId Optional client-generated ID used to identify this event.
 * @param previousItemId The ID of the preceding item after which the new item
 *   will be inserted. If not set, the new item will be appended to the end of
 *   the conversation. If set to `root`, the new item will be added to the
 *   beginning of the conversation. If set to an existing ID, it allows an item
 *   to be inserted mid-conversation. If the ID cannot be found, an error will
 *   be returned and the item will not be added.
 */
data class RealtimeClientEventConversationItemCreate(

    /* The event type, must be `conversation.item.create`. */
    @Json(name = "type")
    val type: RealtimeClientEventConversationItemCreate.Type =
        RealtimeClientEventConversationItemCreate.Type
            .conversationPeriodItemPeriodCreate,
    @Json(name = "item") val item: RealtimeConversationItem,

    /* Optional client-generated ID used to identify this event. */
    @Json(name = "event_id") val eventId: kotlin.String? = null,

    /* The ID of the preceding item after which the new item will be inserted.  If not set, the new item will be appended to the end of the conversation. If set to `root`, the new item will be added to the beginning of the conversation. If set to an existing ID, it allows an item to be inserted mid-conversation. If the ID cannot be found, an error will be returned and the item will not be added.  */
    @Json(name = "previous_item_id") val previousItemId: kotlin.String? = null,
) {

    /**
     * The event type, must be `conversation.item.create`.
     *
     * Values: conversationPeriodItemPeriodCreate
     */
    @JsonClass(generateAdapter = false)
    enum class Type(val value: kotlin.String) {
        @Json(name = "conversation.item.create")
        conversationPeriodItemPeriodCreate("conversation.item.create")
    }
}
