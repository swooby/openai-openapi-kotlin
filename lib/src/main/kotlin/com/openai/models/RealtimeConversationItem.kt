/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.openai.models

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * The item to add to the conversation.
 *
 * @param id The unique ID of the item, this can be generated by the client to help  manage server-side context, but is not required because the server will  generate one if not provided. 
 * @param type The type of the item (`message`, `function_call`, `function_call_output`). 
 * @param `object` Identifier for the API object being returned - always `realtime.item`. 
 * @param status The status of the item (`completed`, `incomplete`). These have no effect  on the conversation, but are accepted for consistency with the  `conversation.item.created` event. 
 * @param role The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items. 
 * @param content The content of the message, applicable for `message` items.  - Message items of role `system` support only `input_text` content - Message items of role `user` support `input_text` and `input_audio`    content - Message items of role `assistant` support `text` content. 
 * @param callId The ID of the function call (for `function_call` and  `function_call_output` items). If passed on a `function_call_output`  item, the server will check that a `function_call` item with the same  ID exists in the conversation history. 
 * @param name The name of the function being called (for `function_call` items). 
 * @param arguments The arguments of the function call (for `function_call` items). 
 * @param output The output of the function call (for `function_call_output` items). 
 */


data class RealtimeConversationItem (

    /* The unique ID of the item, this can be generated by the client to help  manage server-side context, but is not required because the server will  generate one if not provided.  */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* The type of the item (`message`, `function_call`, `function_call_output`).  */
    @Json(name = "type")
    val type: RealtimeConversationItem.Type? = null,

    /* Identifier for the API object being returned - always `realtime.item`.  */
    @Json(name = "object")
    val `object`: RealtimeConversationItem.`Object`? = null,

    /* The status of the item (`completed`, `incomplete`). These have no effect  on the conversation, but are accepted for consistency with the  `conversation.item.created` event.  */
    @Json(name = "status")
    val status: RealtimeConversationItem.Status? = null,

    /* The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items.  */
    @Json(name = "role")
    val role: RealtimeConversationItem.Role? = null,

    /* The content of the message, applicable for `message` items.  - Message items of role `system` support only `input_text` content - Message items of role `user` support `input_text` and `input_audio`    content - Message items of role `assistant` support `text` content.  */
    @Json(name = "content")
    val content: kotlin.collections.List<RealtimeConversationItemContent>? = null,

    /* The ID of the function call (for `function_call` and  `function_call_output` items). If passed on a `function_call_output`  item, the server will check that a `function_call` item with the same  ID exists in the conversation history.  */
    @Json(name = "call_id")
    val callId: kotlin.String? = null,

    /* The name of the function being called (for `function_call` items).  */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* The arguments of the function call (for `function_call` items).  */
    @Json(name = "arguments")
    val arguments: kotlin.String? = null,

    /* The output of the function call (for `function_call_output` items).  */
    @Json(name = "output")
    val output: kotlin.String? = null

) {

    /**
     * The type of the item (`message`, `function_call`, `function_call_output`). 
     *
     * Values: message,function_call,function_call_output
     */
    @JsonClass(generateAdapter = false)
    enum class Type(val value: kotlin.String) {
        @Json(name = "message") message("message"),
        @Json(name = "function_call") function_call("function_call"),
        @Json(name = "function_call_output") function_call_output("function_call_output");
    }
    /**
     * Identifier for the API object being returned - always `realtime.item`. 
     *
     * Values: realtimePeriodItem
     */
    @JsonClass(generateAdapter = false)
    enum class `Object`(val value: kotlin.String) {
        @Json(name = "realtime.item") realtimePeriodItem("realtime.item");
    }
    /**
     * The status of the item (`completed`, `incomplete`). These have no effect  on the conversation, but are accepted for consistency with the  `conversation.item.created` event. 
     *
     * Values: completed,incomplete
     */
    @JsonClass(generateAdapter = false)
    enum class Status(val value: kotlin.String) {
        @Json(name = "completed") completed("completed"),
        @Json(name = "incomplete") incomplete("incomplete"),
        @Json(name = "in_progress") inProgress("in_progress");
    }
    /**
     * The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items. 
     *
     * Values: user,assistant,system
     */
    @JsonClass(generateAdapter = false)
    enum class Role(val value: kotlin.String) {
        @Json(name = "user") user("user"),
        @Json(name = "assistant") assistant("assistant"),
        @Json(name = "system") system("system");
    }

}

