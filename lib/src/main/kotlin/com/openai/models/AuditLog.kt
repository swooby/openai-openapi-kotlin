/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.openai.models

import com.squareup.moshi.Json

/**
 * A log of a user action or configuration change within this organization.
 *
 * @param id The ID of this log.
 * @param type 
 * @param effectiveAt The Unix timestamp (in seconds) of the event.
 * @param actor 
 * @param project 
 * @param apiKeyCreated 
 * @param apiKeyUpdated 
 * @param apiKeyDeleted 
 * @param inviteSent 
 * @param inviteAccepted 
 * @param inviteDeleted 
 * @param loginFailed 
 * @param logoutFailed 
 * @param organizationUpdated 
 * @param projectCreated 
 * @param projectUpdated 
 * @param projectArchived 
 * @param rateLimitUpdated 
 * @param rateLimitDeleted 
 * @param serviceAccountCreated 
 * @param serviceAccountUpdated 
 * @param serviceAccountDeleted 
 * @param userAdded 
 * @param userUpdated 
 * @param userDeleted 
 */


data class AuditLog (

    /* The ID of this log. */
    @Json(name = "id")
    val id: kotlin.String,

    @Json(name = "type")
    val type: AuditLogEventType,

    /* The Unix timestamp (in seconds) of the event. */
    @Json(name = "effective_at")
    val effectiveAt: kotlin.Int,

    @Json(name = "actor")
    val actor: AuditLogActor,

    @Json(name = "project")
    val project: AuditLogProject? = null,

    @Json(name = "api_key.created")
    val apiKeyCreated: AuditLogApiKeyCreated? = null,

    @Json(name = "api_key.updated")
    val apiKeyUpdated: AuditLogApiKeyUpdated? = null,

    @Json(name = "api_key.deleted")
    val apiKeyDeleted: AuditLogApiKeyDeleted? = null,

    @Json(name = "invite.sent")
    val inviteSent: AuditLogInviteSent? = null,

    @Json(name = "invite.accepted")
    val inviteAccepted: AuditLogInviteAccepted? = null,

    @Json(name = "invite.deleted")
    val inviteDeleted: AuditLogInviteAccepted? = null,

    @Json(name = "login.failed")
    val loginFailed: AuditLogLoginFailed? = null,

    @Json(name = "logout.failed")
    val logoutFailed: AuditLogLoginFailed? = null,

    @Json(name = "organization.updated")
    val organizationUpdated: AuditLogOrganizationUpdated? = null,

    @Json(name = "project.created")
    val projectCreated: AuditLogProjectCreated? = null,

    @Json(name = "project.updated")
    val projectUpdated: AuditLogProjectUpdated? = null,

    @Json(name = "project.archived")
    val projectArchived: AuditLogProjectArchived? = null,

    @Json(name = "rate_limit.updated")
    val rateLimitUpdated: AuditLogRateLimitUpdated? = null,

    @Json(name = "rate_limit.deleted")
    val rateLimitDeleted: AuditLogRateLimitDeleted? = null,

    @Json(name = "service_account.created")
    val serviceAccountCreated: AuditLogServiceAccountCreated? = null,

    @Json(name = "service_account.updated")
    val serviceAccountUpdated: AuditLogServiceAccountUpdated? = null,

    @Json(name = "service_account.deleted")
    val serviceAccountDeleted: AuditLogServiceAccountDeleted? = null,

    @Json(name = "user.added")
    val userAdded: AuditLogUserAdded? = null,

    @Json(name = "user.updated")
    val userUpdated: AuditLogUserUpdated? = null,

    @Json(name = "user.deleted")
    val userDeleted: AuditLogUserDeleted? = null

) {


}

