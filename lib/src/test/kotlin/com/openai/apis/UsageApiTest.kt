/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.openai.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.openai.apis.UsageApi
import com.openai.models.UsageResponse

class UsageApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of UsageApi
        //val apiInstance = UsageApi()

        // to test usageAudioSpeeches
        should("test usageAudioSpeeches") {
            // uncomment below to test usageAudioSpeeches
            //val startTime : kotlin.Int = 56 // kotlin.Int | Start time (Unix seconds) of the query time range, inclusive.
            //val endTime : kotlin.Int = 56 // kotlin.Int | End time (Unix seconds) of the query time range, exclusive.
            //val bucketWidth : kotlin.String = bucketWidth_example // kotlin.String | Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
            //val projectIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these projects.
            //val userIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these users.
            //val apiKeyIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these API keys.
            //val models : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these models.
            //val groupBy : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
            //val limit : kotlin.Int = 56 // kotlin.Int | Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440 
            //val page : kotlin.String = page_example // kotlin.String | A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
            //val result : UsageResponse = apiInstance.usageAudioSpeeches(startTime, endTime, bucketWidth, projectIds, userIds, apiKeyIds, models, groupBy, limit, page)
            //result shouldBe ("TODO")
        }

        // to test usageAudioTranscriptions
        should("test usageAudioTranscriptions") {
            // uncomment below to test usageAudioTranscriptions
            //val startTime : kotlin.Int = 56 // kotlin.Int | Start time (Unix seconds) of the query time range, inclusive.
            //val endTime : kotlin.Int = 56 // kotlin.Int | End time (Unix seconds) of the query time range, exclusive.
            //val bucketWidth : kotlin.String = bucketWidth_example // kotlin.String | Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
            //val projectIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these projects.
            //val userIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these users.
            //val apiKeyIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these API keys.
            //val models : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these models.
            //val groupBy : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
            //val limit : kotlin.Int = 56 // kotlin.Int | Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440 
            //val page : kotlin.String = page_example // kotlin.String | A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
            //val result : UsageResponse = apiInstance.usageAudioTranscriptions(startTime, endTime, bucketWidth, projectIds, userIds, apiKeyIds, models, groupBy, limit, page)
            //result shouldBe ("TODO")
        }

        // to test usageCodeInterpreterSessions
        should("test usageCodeInterpreterSessions") {
            // uncomment below to test usageCodeInterpreterSessions
            //val startTime : kotlin.Int = 56 // kotlin.Int | Start time (Unix seconds) of the query time range, inclusive.
            //val endTime : kotlin.Int = 56 // kotlin.Int | End time (Unix seconds) of the query time range, exclusive.
            //val bucketWidth : kotlin.String = bucketWidth_example // kotlin.String | Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
            //val projectIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these projects.
            //val groupBy : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Group the usage data by the specified fields. Support fields include `project_id`.
            //val limit : kotlin.Int = 56 // kotlin.Int | Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440 
            //val page : kotlin.String = page_example // kotlin.String | A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
            //val result : UsageResponse = apiInstance.usageCodeInterpreterSessions(startTime, endTime, bucketWidth, projectIds, groupBy, limit, page)
            //result shouldBe ("TODO")
        }

        // to test usageCompletions
        should("test usageCompletions") {
            // uncomment below to test usageCompletions
            //val startTime : kotlin.Int = 56 // kotlin.Int | Start time (Unix seconds) of the query time range, inclusive.
            //val endTime : kotlin.Int = 56 // kotlin.Int | End time (Unix seconds) of the query time range, exclusive.
            //val bucketWidth : kotlin.String = bucketWidth_example // kotlin.String | Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
            //val projectIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these projects.
            //val userIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these users.
            //val apiKeyIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these API keys.
            //val models : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these models.
            //val batch : kotlin.Boolean = true // kotlin.Boolean | If `true`, return batch jobs only. If `false`, return non-batch jobs only. By default, return both. 
            //val groupBy : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `batch` or any combination of them.
            //val limit : kotlin.Int = 56 // kotlin.Int | Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440 
            //val page : kotlin.String = page_example // kotlin.String | A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
            //val result : UsageResponse = apiInstance.usageCompletions(startTime, endTime, bucketWidth, projectIds, userIds, apiKeyIds, models, batch, groupBy, limit, page)
            //result shouldBe ("TODO")
        }

        // to test usageCosts
        should("test usageCosts") {
            // uncomment below to test usageCosts
            //val startTime : kotlin.Int = 56 // kotlin.Int | Start time (Unix seconds) of the query time range, inclusive.
            //val endTime : kotlin.Int = 56 // kotlin.Int | End time (Unix seconds) of the query time range, exclusive.
            //val bucketWidth : kotlin.String = bucketWidth_example // kotlin.String | Width of each time bucket in response. Currently only `1d` is supported, default to `1d`.
            //val projectIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only costs for these projects.
            //val groupBy : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Group the costs by the specified fields. Support fields include `project_id`, `line_item` and any combination of them.
            //val limit : kotlin.Int = 56 // kotlin.Int | A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7. 
            //val page : kotlin.String = page_example // kotlin.String | A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
            //val result : UsageResponse = apiInstance.usageCosts(startTime, endTime, bucketWidth, projectIds, groupBy, limit, page)
            //result shouldBe ("TODO")
        }

        // to test usageEmbeddings
        should("test usageEmbeddings") {
            // uncomment below to test usageEmbeddings
            //val startTime : kotlin.Int = 56 // kotlin.Int | Start time (Unix seconds) of the query time range, inclusive.
            //val endTime : kotlin.Int = 56 // kotlin.Int | End time (Unix seconds) of the query time range, exclusive.
            //val bucketWidth : kotlin.String = bucketWidth_example // kotlin.String | Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
            //val projectIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these projects.
            //val userIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these users.
            //val apiKeyIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these API keys.
            //val models : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these models.
            //val groupBy : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
            //val limit : kotlin.Int = 56 // kotlin.Int | Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440 
            //val page : kotlin.String = page_example // kotlin.String | A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
            //val result : UsageResponse = apiInstance.usageEmbeddings(startTime, endTime, bucketWidth, projectIds, userIds, apiKeyIds, models, groupBy, limit, page)
            //result shouldBe ("TODO")
        }

        // to test usageImages
        should("test usageImages") {
            // uncomment below to test usageImages
            //val startTime : kotlin.Int = 56 // kotlin.Int | Start time (Unix seconds) of the query time range, inclusive.
            //val endTime : kotlin.Int = 56 // kotlin.Int | End time (Unix seconds) of the query time range, exclusive.
            //val bucketWidth : kotlin.String = bucketWidth_example // kotlin.String | Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
            //val sources : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usages for these sources. Possible values are `image.generation`, `image.edit`, `image.variation` or any combination of them.
            //val sizes : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usages for these image sizes. Possible values are `256x256`, `512x512`, `1024x1024`, `1792x1792`, `1024x1792` or any combination of them.
            //val projectIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these projects.
            //val userIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these users.
            //val apiKeyIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these API keys.
            //val models : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these models.
            //val groupBy : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `size`, `source` or any combination of them.
            //val limit : kotlin.Int = 56 // kotlin.Int | Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440 
            //val page : kotlin.String = page_example // kotlin.String | A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
            //val result : UsageResponse = apiInstance.usageImages(startTime, endTime, bucketWidth, sources, sizes, projectIds, userIds, apiKeyIds, models, groupBy, limit, page)
            //result shouldBe ("TODO")
        }

        // to test usageModerations
        should("test usageModerations") {
            // uncomment below to test usageModerations
            //val startTime : kotlin.Int = 56 // kotlin.Int | Start time (Unix seconds) of the query time range, inclusive.
            //val endTime : kotlin.Int = 56 // kotlin.Int | End time (Unix seconds) of the query time range, exclusive.
            //val bucketWidth : kotlin.String = bucketWidth_example // kotlin.String | Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
            //val projectIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these projects.
            //val userIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these users.
            //val apiKeyIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these API keys.
            //val models : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these models.
            //val groupBy : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
            //val limit : kotlin.Int = 56 // kotlin.Int | Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440 
            //val page : kotlin.String = page_example // kotlin.String | A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
            //val result : UsageResponse = apiInstance.usageModerations(startTime, endTime, bucketWidth, projectIds, userIds, apiKeyIds, models, groupBy, limit, page)
            //result shouldBe ("TODO")
        }

        // to test usageVectorStores
        should("test usageVectorStores") {
            // uncomment below to test usageVectorStores
            //val startTime : kotlin.Int = 56 // kotlin.Int | Start time (Unix seconds) of the query time range, inclusive.
            //val endTime : kotlin.Int = 56 // kotlin.Int | End time (Unix seconds) of the query time range, exclusive.
            //val bucketWidth : kotlin.String = bucketWidth_example // kotlin.String | Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
            //val projectIds : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Return only usage for these projects.
            //val groupBy : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Group the usage data by the specified fields. Support fields include `project_id`.
            //val limit : kotlin.Int = 56 // kotlin.Int | Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440 
            //val page : kotlin.String = page_example // kotlin.String | A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
            //val result : UsageResponse = apiInstance.usageVectorStores(startTime, endTime, bucketWidth, projectIds, groupBy, limit, page)
            //result shouldBe ("TODO")
        }

    }
}
