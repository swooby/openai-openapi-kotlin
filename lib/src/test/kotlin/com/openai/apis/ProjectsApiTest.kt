/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.openai.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.openai.apis.ProjectsApi
import com.openai.models.ErrorResponse
import com.openai.models.Project
import com.openai.models.ProjectApiKey
import com.openai.models.ProjectApiKeyDeleteResponse
import com.openai.models.ProjectApiKeyListResponse
import com.openai.models.ProjectCreateRequest
import com.openai.models.ProjectListResponse
import com.openai.models.ProjectRateLimit
import com.openai.models.ProjectRateLimitListResponse
import com.openai.models.ProjectRateLimitUpdateRequest
import com.openai.models.ProjectServiceAccount
import com.openai.models.ProjectServiceAccountCreateRequest
import com.openai.models.ProjectServiceAccountCreateResponse
import com.openai.models.ProjectServiceAccountDeleteResponse
import com.openai.models.ProjectServiceAccountListResponse
import com.openai.models.ProjectUpdateRequest
import com.openai.models.ProjectUser
import com.openai.models.ProjectUserCreateRequest
import com.openai.models.ProjectUserDeleteResponse
import com.openai.models.ProjectUserListResponse
import com.openai.models.ProjectUserUpdateRequest

class ProjectsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProjectsApi
        //val apiInstance = ProjectsApi()

        // to test archiveProject
        should("test archiveProject") {
            // uncomment below to test archiveProject
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val result : Project = apiInstance.archiveProject(projectId)
            //result shouldBe ("TODO")
        }

        // to test createProject
        should("test createProject") {
            // uncomment below to test createProject
            //val projectCreateRequest : ProjectCreateRequest =  // ProjectCreateRequest | The project create request payload.
            //val result : Project = apiInstance.createProject(projectCreateRequest)
            //result shouldBe ("TODO")
        }

        // to test createProjectServiceAccount
        should("test createProjectServiceAccount") {
            // uncomment below to test createProjectServiceAccount
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val projectServiceAccountCreateRequest : ProjectServiceAccountCreateRequest =  // ProjectServiceAccountCreateRequest | The project service account create request payload.
            //val result : ProjectServiceAccountCreateResponse = apiInstance.createProjectServiceAccount(projectId, projectServiceAccountCreateRequest)
            //result shouldBe ("TODO")
        }

        // to test createProjectUser
        should("test createProjectUser") {
            // uncomment below to test createProjectUser
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val projectUserCreateRequest : ProjectUserCreateRequest =  // ProjectUserCreateRequest | The project user create request payload.
            //val result : ProjectUser = apiInstance.createProjectUser(projectId, projectUserCreateRequest)
            //result shouldBe ("TODO")
        }

        // to test deleteProjectApiKey
        should("test deleteProjectApiKey") {
            // uncomment below to test deleteProjectApiKey
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val keyId : kotlin.String = keyId_example // kotlin.String | The ID of the API key.
            //val result : ProjectApiKeyDeleteResponse = apiInstance.deleteProjectApiKey(projectId, keyId)
            //result shouldBe ("TODO")
        }

        // to test deleteProjectServiceAccount
        should("test deleteProjectServiceAccount") {
            // uncomment below to test deleteProjectServiceAccount
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val serviceAccountId : kotlin.String = serviceAccountId_example // kotlin.String | The ID of the service account.
            //val result : ProjectServiceAccountDeleteResponse = apiInstance.deleteProjectServiceAccount(projectId, serviceAccountId)
            //result shouldBe ("TODO")
        }

        // to test deleteProjectUser
        should("test deleteProjectUser") {
            // uncomment below to test deleteProjectUser
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val userId : kotlin.String = userId_example // kotlin.String | The ID of the user.
            //val result : ProjectUserDeleteResponse = apiInstance.deleteProjectUser(projectId, userId)
            //result shouldBe ("TODO")
        }

        // to test listProjectApiKeys
        should("test listProjectApiKeys") {
            // uncomment below to test listProjectApiKeys
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val limit : kotlin.Int = 56 // kotlin.Int | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
            //val after : kotlin.String = after_example // kotlin.String | A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
            //val result : ProjectApiKeyListResponse = apiInstance.listProjectApiKeys(projectId, limit, after)
            //result shouldBe ("TODO")
        }

        // to test listProjectRateLimits
        should("test listProjectRateLimits") {
            // uncomment below to test listProjectRateLimits
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val limit : kotlin.Int = 56 // kotlin.Int | A limit on the number of objects to be returned. The default is 100. 
            //val after : kotlin.String = after_example // kotlin.String | A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
            //val before : kotlin.String = before_example // kotlin.String | A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. 
            //val result : ProjectRateLimitListResponse = apiInstance.listProjectRateLimits(projectId, limit, after, before)
            //result shouldBe ("TODO")
        }

        // to test listProjectServiceAccounts
        should("test listProjectServiceAccounts") {
            // uncomment below to test listProjectServiceAccounts
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val limit : kotlin.Int = 56 // kotlin.Int | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
            //val after : kotlin.String = after_example // kotlin.String | A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
            //val result : ProjectServiceAccountListResponse = apiInstance.listProjectServiceAccounts(projectId, limit, after)
            //result shouldBe ("TODO")
        }

        // to test listProjectUsers
        should("test listProjectUsers") {
            // uncomment below to test listProjectUsers
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val limit : kotlin.Int = 56 // kotlin.Int | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
            //val after : kotlin.String = after_example // kotlin.String | A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
            //val result : ProjectUserListResponse = apiInstance.listProjectUsers(projectId, limit, after)
            //result shouldBe ("TODO")
        }

        // to test listProjects
        should("test listProjects") {
            // uncomment below to test listProjects
            //val limit : kotlin.Int = 56 // kotlin.Int | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
            //val after : kotlin.String = after_example // kotlin.String | A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. 
            //val includeArchived : kotlin.Boolean = true // kotlin.Boolean | If `true` returns all projects including those that have been `archived`. Archived projects are not included by default.
            //val result : ProjectListResponse = apiInstance.listProjects(limit, after, includeArchived)
            //result shouldBe ("TODO")
        }

        // to test modifyProject
        should("test modifyProject") {
            // uncomment below to test modifyProject
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val projectUpdateRequest : ProjectUpdateRequest =  // ProjectUpdateRequest | The project update request payload.
            //val result : Project = apiInstance.modifyProject(projectId, projectUpdateRequest)
            //result shouldBe ("TODO")
        }

        // to test modifyProjectUser
        should("test modifyProjectUser") {
            // uncomment below to test modifyProjectUser
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val userId : kotlin.String = userId_example // kotlin.String | The ID of the user.
            //val projectUserUpdateRequest : ProjectUserUpdateRequest =  // ProjectUserUpdateRequest | The project user update request payload.
            //val result : ProjectUser = apiInstance.modifyProjectUser(projectId, userId, projectUserUpdateRequest)
            //result shouldBe ("TODO")
        }

        // to test retrieveProject
        should("test retrieveProject") {
            // uncomment below to test retrieveProject
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val result : Project = apiInstance.retrieveProject(projectId)
            //result shouldBe ("TODO")
        }

        // to test retrieveProjectApiKey
        should("test retrieveProjectApiKey") {
            // uncomment below to test retrieveProjectApiKey
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val keyId : kotlin.String = keyId_example // kotlin.String | The ID of the API key.
            //val result : ProjectApiKey = apiInstance.retrieveProjectApiKey(projectId, keyId)
            //result shouldBe ("TODO")
        }

        // to test retrieveProjectServiceAccount
        should("test retrieveProjectServiceAccount") {
            // uncomment below to test retrieveProjectServiceAccount
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val serviceAccountId : kotlin.String = serviceAccountId_example // kotlin.String | The ID of the service account.
            //val result : ProjectServiceAccount = apiInstance.retrieveProjectServiceAccount(projectId, serviceAccountId)
            //result shouldBe ("TODO")
        }

        // to test retrieveProjectUser
        should("test retrieveProjectUser") {
            // uncomment below to test retrieveProjectUser
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val userId : kotlin.String = userId_example // kotlin.String | The ID of the user.
            //val result : ProjectUser = apiInstance.retrieveProjectUser(projectId, userId)
            //result shouldBe ("TODO")
        }

        // to test updateProjectRateLimits
        should("test updateProjectRateLimits") {
            // uncomment below to test updateProjectRateLimits
            //val projectId : kotlin.String = projectId_example // kotlin.String | The ID of the project.
            //val rateLimitId : kotlin.String = rateLimitId_example // kotlin.String | The ID of the rate limit.
            //val projectRateLimitUpdateRequest : ProjectRateLimitUpdateRequest =  // ProjectRateLimitUpdateRequest | The project rate limit update request payload.
            //val result : ProjectRateLimit = apiInstance.updateProjectRateLimits(projectId, rateLimitId, projectRateLimitUpdateRequest)
            //result shouldBe ("TODO")
        }

    }
}
