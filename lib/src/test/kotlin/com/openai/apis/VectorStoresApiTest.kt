/**
 * Please note: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). Do not edit this file manually.
 */
@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package com.openai.apis

import io.kotlintest.specs.ShouldSpec

class VectorStoresApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of VectorStoresApi
        // val apiInstance = VectorStoresApi()

        // to test cancelVectorStoreFileBatch
        should("test cancelVectorStoreFileBatch") {
            // uncomment below to test cancelVectorStoreFileBatch
            // val vectorStoreId : kotlin.String = vectorStoreId_example //
            // kotlin.String | The ID of the vector store that the file batch
            // belongs to.
            // val batchId : kotlin.String = batchId_example // kotlin.String |
            // The ID of the file batch to cancel.
            // val result : VectorStoreFileBatchObject =
            // apiInstance.cancelVectorStoreFileBatch(vectorStoreId, batchId)
            // result shouldBe ("TODO")
        }

        // to test createVectorStore
        should("test createVectorStore") {
            // uncomment below to test createVectorStore
            // val createVectorStoreRequest : CreateVectorStoreRequest =  //
            // CreateVectorStoreRequest |
            // val result : VectorStoreObject =
            // apiInstance.createVectorStore(createVectorStoreRequest)
            // result shouldBe ("TODO")
        }

        // to test createVectorStoreFile
        should("test createVectorStoreFile") {
            // uncomment below to test createVectorStoreFile
            // val vectorStoreId : kotlin.String = vs_abc123 // kotlin.String |
            // The ID of the vector store for which to create a File.
            // val createVectorStoreFileRequest : CreateVectorStoreFileRequest =
            //  // CreateVectorStoreFileRequest |
            // val result : VectorStoreFileObject =
            // apiInstance.createVectorStoreFile(vectorStoreId,
            // createVectorStoreFileRequest)
            // result shouldBe ("TODO")
        }

        // to test createVectorStoreFileBatch
        should("test createVectorStoreFileBatch") {
            // uncomment below to test createVectorStoreFileBatch
            // val vectorStoreId : kotlin.String = vs_abc123 // kotlin.String |
            // The ID of the vector store for which to create a File Batch.
            // val createVectorStoreFileBatchRequest :
            // CreateVectorStoreFileBatchRequest =  //
            // CreateVectorStoreFileBatchRequest |
            // val result : VectorStoreFileBatchObject =
            // apiInstance.createVectorStoreFileBatch(vectorStoreId,
            // createVectorStoreFileBatchRequest)
            // result shouldBe ("TODO")
        }

        // to test deleteVectorStore
        should("test deleteVectorStore") {
            // uncomment below to test deleteVectorStore
            // val vectorStoreId : kotlin.String = vectorStoreId_example //
            // kotlin.String | The ID of the vector store to delete.
            // val result : DeleteVectorStoreResponse =
            // apiInstance.deleteVectorStore(vectorStoreId)
            // result shouldBe ("TODO")
        }

        // to test deleteVectorStoreFile
        should("test deleteVectorStoreFile") {
            // uncomment below to test deleteVectorStoreFile
            // val vectorStoreId : kotlin.String = vectorStoreId_example //
            // kotlin.String | The ID of the vector store that the file belongs
            // to.
            // val fileId : kotlin.String = fileId_example // kotlin.String |
            // The ID of the file to delete.
            // val result : DeleteVectorStoreFileResponse =
            // apiInstance.deleteVectorStoreFile(vectorStoreId, fileId)
            // result shouldBe ("TODO")
        }

        // to test getVectorStore
        should("test getVectorStore") {
            // uncomment below to test getVectorStore
            // val vectorStoreId : kotlin.String = vectorStoreId_example //
            // kotlin.String | The ID of the vector store to retrieve.
            // val result : VectorStoreObject =
            // apiInstance.getVectorStore(vectorStoreId)
            // result shouldBe ("TODO")
        }

        // to test getVectorStoreFile
        should("test getVectorStoreFile") {
            // uncomment below to test getVectorStoreFile
            // val vectorStoreId : kotlin.String = vs_abc123 // kotlin.String |
            // The ID of the vector store that the file belongs to.
            // val fileId : kotlin.String = file-abc123 // kotlin.String | The
            // ID of the file being retrieved.
            // val result : VectorStoreFileObject =
            // apiInstance.getVectorStoreFile(vectorStoreId, fileId)
            // result shouldBe ("TODO")
        }

        // to test getVectorStoreFileBatch
        should("test getVectorStoreFileBatch") {
            // uncomment below to test getVectorStoreFileBatch
            // val vectorStoreId : kotlin.String = vs_abc123 // kotlin.String |
            // The ID of the vector store that the file batch belongs to.
            // val batchId : kotlin.String = vsfb_abc123 // kotlin.String | The
            // ID of the file batch being retrieved.
            // val result : VectorStoreFileBatchObject =
            // apiInstance.getVectorStoreFileBatch(vectorStoreId, batchId)
            // result shouldBe ("TODO")
        }

        // to test listFilesInVectorStoreBatch
        should("test listFilesInVectorStoreBatch") {
            // uncomment below to test listFilesInVectorStoreBatch
            // val vectorStoreId : kotlin.String = vectorStoreId_example //
            // kotlin.String | The ID of the vector store that the files belong
            // to.
            // val batchId : kotlin.String = batchId_example // kotlin.String |
            // The ID of the file batch that the files belong to.
            // val limit : kotlin.Int = 56 // kotlin.Int | A limit on the number
            // of objects to be returned. Limit can range between 1 and 100, and
            // the default is 20.
            // val order : kotlin.String = order_example // kotlin.String | Sort
            // order by the `created_at` timestamp of the objects. `asc` for
            // ascending order and `desc` for descending order.
            // val after : kotlin.String = after_example // kotlin.String | A
            // cursor for use in pagination. `after` is an object ID that
            // defines your place in the list. For instance, if you make a list
            // request and receive 100 objects, ending with obj_foo, your
            // subsequent call can include after=obj_foo in order to fetch the
            // next page of the list.
            // val before : kotlin.String = before_example // kotlin.String | A
            // cursor for use in pagination. `before` is an object ID that
            // defines your place in the list. For instance, if you make a list
            // request and receive 100 objects, starting with obj_foo, your
            // subsequent call can include before=obj_foo in order to fetch the
            // previous page of the list.
            // val filter : kotlin.String = filter_example // kotlin.String |
            // Filter by file status. One of `in_progress`, `completed`,
            // `failed`, `cancelled`.
            // val result : ListVectorStoreFilesResponse =
            // apiInstance.listFilesInVectorStoreBatch(vectorStoreId, batchId,
            // limit, order, after, before, filter)
            // result shouldBe ("TODO")
        }

        // to test listVectorStoreFiles
        should("test listVectorStoreFiles") {
            // uncomment below to test listVectorStoreFiles
            // val vectorStoreId : kotlin.String = vectorStoreId_example //
            // kotlin.String | The ID of the vector store that the files belong
            // to.
            // val limit : kotlin.Int = 56 // kotlin.Int | A limit on the number
            // of objects to be returned. Limit can range between 1 and 100, and
            // the default is 20.
            // val order : kotlin.String = order_example // kotlin.String | Sort
            // order by the `created_at` timestamp of the objects. `asc` for
            // ascending order and `desc` for descending order.
            // val after : kotlin.String = after_example // kotlin.String | A
            // cursor for use in pagination. `after` is an object ID that
            // defines your place in the list. For instance, if you make a list
            // request and receive 100 objects, ending with obj_foo, your
            // subsequent call can include after=obj_foo in order to fetch the
            // next page of the list.
            // val before : kotlin.String = before_example // kotlin.String | A
            // cursor for use in pagination. `before` is an object ID that
            // defines your place in the list. For instance, if you make a list
            // request and receive 100 objects, starting with obj_foo, your
            // subsequent call can include before=obj_foo in order to fetch the
            // previous page of the list.
            // val filter : kotlin.String = filter_example // kotlin.String |
            // Filter by file status. One of `in_progress`, `completed`,
            // `failed`, `cancelled`.
            // val result : ListVectorStoreFilesResponse =
            // apiInstance.listVectorStoreFiles(vectorStoreId, limit, order,
            // after, before, filter)
            // result shouldBe ("TODO")
        }

        // to test listVectorStores
        should("test listVectorStores") {
            // uncomment below to test listVectorStores
            // val limit : kotlin.Int = 56 // kotlin.Int | A limit on the number
            // of objects to be returned. Limit can range between 1 and 100, and
            // the default is 20.
            // val order : kotlin.String = order_example // kotlin.String | Sort
            // order by the `created_at` timestamp of the objects. `asc` for
            // ascending order and `desc` for descending order.
            // val after : kotlin.String = after_example // kotlin.String | A
            // cursor for use in pagination. `after` is an object ID that
            // defines your place in the list. For instance, if you make a list
            // request and receive 100 objects, ending with obj_foo, your
            // subsequent call can include after=obj_foo in order to fetch the
            // next page of the list.
            // val before : kotlin.String = before_example // kotlin.String | A
            // cursor for use in pagination. `before` is an object ID that
            // defines your place in the list. For instance, if you make a list
            // request and receive 100 objects, starting with obj_foo, your
            // subsequent call can include before=obj_foo in order to fetch the
            // previous page of the list.
            // val result : ListVectorStoresResponse =
            // apiInstance.listVectorStores(limit, order, after, before)
            // result shouldBe ("TODO")
        }

        // to test modifyVectorStore
        should("test modifyVectorStore") {
            // uncomment below to test modifyVectorStore
            // val vectorStoreId : kotlin.String = vectorStoreId_example //
            // kotlin.String | The ID of the vector store to modify.
            // val updateVectorStoreRequest : UpdateVectorStoreRequest =  //
            // UpdateVectorStoreRequest |
            // val result : VectorStoreObject =
            // apiInstance.modifyVectorStore(vectorStoreId,
            // updateVectorStoreRequest)
            // result shouldBe ("TODO")
        }
    }
}
