/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.openai.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.openai.models.Batch
import com.openai.models.BatchErrors
import com.openai.models.BatchRequestCounts

class BatchTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Batch
        //val modelInstance = Batch()

        // to test the property `id`
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property ``object`` - The object type, which is always `batch`.
        should("test `object`") {
            // uncomment below to test the property
            //modelInstance.`object` shouldBe ("TODO")
        }

        // to test the property `endpoint` - The OpenAI API endpoint used by the batch.
        should("test endpoint") {
            // uncomment below to test the property
            //modelInstance.endpoint shouldBe ("TODO")
        }

        // to test the property `inputFileId` - The ID of the input file for the batch.
        should("test inputFileId") {
            // uncomment below to test the property
            //modelInstance.inputFileId shouldBe ("TODO")
        }

        // to test the property `completionWindow` - The time frame within which the batch should be processed.
        should("test completionWindow") {
            // uncomment below to test the property
            //modelInstance.completionWindow shouldBe ("TODO")
        }

        // to test the property `status` - The current status of the batch.
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `createdAt` - The Unix timestamp (in seconds) for when the batch was created.
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `errors`
        should("test errors") {
            // uncomment below to test the property
            //modelInstance.errors shouldBe ("TODO")
        }

        // to test the property `outputFileId` - The ID of the file containing the outputs of successfully executed requests.
        should("test outputFileId") {
            // uncomment below to test the property
            //modelInstance.outputFileId shouldBe ("TODO")
        }

        // to test the property `errorFileId` - The ID of the file containing the outputs of requests with errors.
        should("test errorFileId") {
            // uncomment below to test the property
            //modelInstance.errorFileId shouldBe ("TODO")
        }

        // to test the property `inProgressAt` - The Unix timestamp (in seconds) for when the batch started processing.
        should("test inProgressAt") {
            // uncomment below to test the property
            //modelInstance.inProgressAt shouldBe ("TODO")
        }

        // to test the property `expiresAt` - The Unix timestamp (in seconds) for when the batch will expire.
        should("test expiresAt") {
            // uncomment below to test the property
            //modelInstance.expiresAt shouldBe ("TODO")
        }

        // to test the property `finalizingAt` - The Unix timestamp (in seconds) for when the batch started finalizing.
        should("test finalizingAt") {
            // uncomment below to test the property
            //modelInstance.finalizingAt shouldBe ("TODO")
        }

        // to test the property `completedAt` - The Unix timestamp (in seconds) for when the batch was completed.
        should("test completedAt") {
            // uncomment below to test the property
            //modelInstance.completedAt shouldBe ("TODO")
        }

        // to test the property `failedAt` - The Unix timestamp (in seconds) for when the batch failed.
        should("test failedAt") {
            // uncomment below to test the property
            //modelInstance.failedAt shouldBe ("TODO")
        }

        // to test the property `expiredAt` - The Unix timestamp (in seconds) for when the batch expired.
        should("test expiredAt") {
            // uncomment below to test the property
            //modelInstance.expiredAt shouldBe ("TODO")
        }

        // to test the property `cancellingAt` - The Unix timestamp (in seconds) for when the batch started cancelling.
        should("test cancellingAt") {
            // uncomment below to test the property
            //modelInstance.cancellingAt shouldBe ("TODO")
        }

        // to test the property `cancelledAt` - The Unix timestamp (in seconds) for when the batch was cancelled.
        should("test cancelledAt") {
            // uncomment below to test the property
            //modelInstance.cancelledAt shouldBe ("TODO")
        }

        // to test the property `requestCounts`
        should("test requestCounts") {
            // uncomment below to test the property
            //modelInstance.requestCounts shouldBe ("TODO")
        }

        // to test the property `metadata` - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long. 
        should("test metadata") {
            // uncomment below to test the property
            //modelInstance.metadata shouldBe ("TODO")
        }

    }
}
