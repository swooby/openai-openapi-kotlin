/**
 * Please note: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). Do not edit this file manually.
 */
@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package com.openai.models

import io.kotlintest.specs.ShouldSpec

class RealtimeResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of RealtimeResponse
        // val modelInstance = RealtimeResponse()

        // to test the property `id` - The unique ID of the response.
        should("test id") {
            // uncomment below to test the property
            // modelInstance.id shouldBe ("TODO")
        }

        // to test the property ``object`` - The object type, must be
        // `realtime.response`.
        should("test `object`") {
            // uncomment below to test the property
            // modelInstance.`object` shouldBe ("TODO")
        }

        // to test the property `status` - The final status of the response
        // (`completed`, `cancelled`, `failed`, or  `incomplete`).
        should("test status") {
            // uncomment below to test the property
            // modelInstance.status shouldBe ("TODO")
        }

        // to test the property `statusDetails`
        should("test statusDetails") {
            // uncomment below to test the property
            // modelInstance.statusDetails shouldBe ("TODO")
        }

        // to test the property `output` - The list of output items generated by
        // the response.
        should("test output") {
            // uncomment below to test the property
            // modelInstance.output shouldBe ("TODO")
        }

        // to test the property `metadata` - Set of 16 key-value pairs that can
        // be attached to an object. This can be useful for storing additional
        // information about the object in a structured format, and querying for
        // objects via API or the dashboard.   Keys are strings with a maximum
        // length of 64 characters. Values are strings with a maximum length of
        // 512 characters.
        should("test metadata") {
            // uncomment below to test the property
            // modelInstance.metadata shouldBe ("TODO")
        }

        // to test the property `usage`
        should("test usage") {
            // uncomment below to test the property
            // modelInstance.usage shouldBe ("TODO")
        }

        // to test the property `conversationId` - Which conversation the
        // response is added to, determined by the `conversation` field in the
        // `response.create` event. If `auto`, the response will be added to the
        // default conversation and the value of `conversation_id` will be an id
        // like `conv_1234`. If `none`, the response will not be added to any
        // conversation and the value of `conversation_id` will be `null`. If
        // responses are being triggered by server VAD, the response will be
        // added to the default conversation, thus the `conversation_id` will be
        // an id like `conv_1234`.
        should("test conversationId") {
            // uncomment below to test the property
            // modelInstance.conversationId shouldBe ("TODO")
        }

        // to test the property `voice` - The voice the model used to respond.
        // Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`
        // `sage`,  `shimmer` and `verse`.
        should("test voice") {
            // uncomment below to test the property
            // modelInstance.voice shouldBe ("TODO")
        }

        // to test the property `modalities` - The set of modalities the model
        // used to respond. If there are multiple modalities, the model will
        // pick one, for example if `modalities` is `[\"text\", \"audio\"]`, the
        // model could be responding in either text or audio.
        should("test modalities") {
            // uncomment below to test the property
            // modelInstance.modalities shouldBe ("TODO")
        }

        // to test the property `outputAudioFormat` - The format of output
        // audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
        should("test outputAudioFormat") {
            // uncomment below to test the property
            // modelInstance.outputAudioFormat shouldBe ("TODO")
        }

        // to test the property `temperature` - Sampling temperature for the
        // model, limited to [0.6, 1.2]. Defaults to 0.8.
        should("test temperature") {
            // uncomment below to test the property
            // modelInstance.temperature shouldBe ("TODO")
        }

        // to test the property `maxOutputTokens`
        should("test maxOutputTokens") {
            // uncomment below to test the property
            // modelInstance.maxOutputTokens shouldBe ("TODO")
        }
    }
}
