/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.openai.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.openai.models.CompletionUsageCompletionTokensDetails

class CompletionUsageCompletionTokensDetailsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CompletionUsageCompletionTokensDetails
        //val modelInstance = CompletionUsageCompletionTokensDetails()

        // to test the property `acceptedPredictionTokens` - When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion. 
        should("test acceptedPredictionTokens") {
            // uncomment below to test the property
            //modelInstance.acceptedPredictionTokens shouldBe ("TODO")
        }

        // to test the property `audioTokens` - Audio input tokens generated by the model.
        should("test audioTokens") {
            // uncomment below to test the property
            //modelInstance.audioTokens shouldBe ("TODO")
        }

        // to test the property `reasoningTokens` - Tokens generated by the model for reasoning.
        should("test reasoningTokens") {
            // uncomment below to test the property
            //modelInstance.reasoningTokens shouldBe ("TODO")
        }

        // to test the property `rejectedPredictionTokens` - When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion. However, like reasoning tokens, these tokens are still counted in the total completion tokens for purposes of billing, output, and context window limits. 
        should("test rejectedPredictionTokens") {
            // uncomment below to test the property
            //modelInstance.rejectedPredictionTokens shouldBe ("TODO")
        }

    }
}
