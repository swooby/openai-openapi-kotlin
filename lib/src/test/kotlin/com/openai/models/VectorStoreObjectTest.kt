/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.openai.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.openai.models.VectorStoreObject
import com.openai.models.VectorStoreExpirationAfter
import com.openai.models.VectorStoreObjectFileCounts

class VectorStoreObjectTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of VectorStoreObject
        //val modelInstance = VectorStoreObject()

        // to test the property `id` - The identifier, which can be referenced in API endpoints.
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property ``object`` - The object type, which is always `vector_store`.
        should("test `object`") {
            // uncomment below to test the property
            //modelInstance.`object` shouldBe ("TODO")
        }

        // to test the property `createdAt` - The Unix timestamp (in seconds) for when the vector store was created.
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `name` - The name of the vector store.
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `usageBytes` - The total number of bytes used by the files in the vector store.
        should("test usageBytes") {
            // uncomment below to test the property
            //modelInstance.usageBytes shouldBe ("TODO")
        }

        // to test the property `fileCounts`
        should("test fileCounts") {
            // uncomment below to test the property
            //modelInstance.fileCounts shouldBe ("TODO")
        }

        // to test the property `status` - The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `lastActiveAt` - The Unix timestamp (in seconds) for when the vector store was last active.
        should("test lastActiveAt") {
            // uncomment below to test the property
            //modelInstance.lastActiveAt shouldBe ("TODO")
        }

        // to test the property `metadata` - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long. 
        should("test metadata") {
            // uncomment below to test the property
            //modelInstance.metadata shouldBe ("TODO")
        }

        // to test the property `expiresAfter`
        should("test expiresAfter") {
            // uncomment below to test the property
            //modelInstance.expiresAfter shouldBe ("TODO")
        }

        // to test the property `expiresAt` - The Unix timestamp (in seconds) for when the vector store will expire.
        should("test expiresAt") {
            // uncomment below to test the property
            //modelInstance.expiresAt shouldBe ("TODO")
        }

    }
}
