/**
 * Please note: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). Do not edit this file manually.
 */
@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package com.openai.models

import io.kotlintest.specs.ShouldSpec

class CreateBatchRequestTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CreateBatchRequest
        // val modelInstance = CreateBatchRequest()

        // to test the property `inputFileId` - The ID of an uploaded file that
        // contains requests for the new batch.  See [upload
        // file](/docs/api-reference/files/create) for how to upload a file.
        // Your input file must be formatted as a [JSONL
        // file](/docs/api-reference/batch/request-input), and must be uploaded
        // with the purpose `batch`. The file can contain up to 50,000 requests,
        // and can be up to 200 MB in size.
        should("test inputFileId") {
            // uncomment below to test the property
            // modelInstance.inputFileId shouldBe ("TODO")
        }

        // to test the property `endpoint` - The endpoint to be used for all
        // requests in the batch. Currently `/v1/chat/completions`,
        // `/v1/embeddings`, and `/v1/completions` are supported. Note that
        // `/v1/embeddings` batches are also restricted to a maximum of 50,000
        // embedding inputs across all requests in the batch.
        should("test endpoint") {
            // uncomment below to test the property
            // modelInstance.endpoint shouldBe ("TODO")
        }

        // to test the property `completionWindow` - The time frame within which
        // the batch should be processed. Currently only `24h` is supported.
        should("test completionWindow") {
            // uncomment below to test the property
            // modelInstance.completionWindow shouldBe ("TODO")
        }

        // to test the property `metadata` - Set of 16 key-value pairs that can
        // be attached to an object. This can be useful for storing additional
        // information about the object in a structured format, and querying for
        // objects via API or the dashboard.   Keys are strings with a maximum
        // length of 64 characters. Values are strings with a maximum length of
        // 512 characters.
        should("test metadata") {
            // uncomment below to test the property
            // modelInstance.metadata shouldBe ("TODO")
        }
    }
}
