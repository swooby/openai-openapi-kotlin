/**
 * Please note: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). Do not edit this file manually.
 */
@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package com.openai.models

import io.kotlintest.specs.ShouldSpec

class ResponseFormatJsonSchemaJsonSchemaTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of
        // ResponseFormatJsonSchemaJsonSchema
        // val modelInstance = ResponseFormatJsonSchemaJsonSchema()

        // to test the property `name` - The name of the response format. Must
        // be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum
        // length of 64.
        should("test name") {
            // uncomment below to test the property
            // modelInstance.name shouldBe ("TODO")
        }

        // to test the property `description` - A description of what the
        // response format is for, used by the model to determine how to respond
        // in the format.
        should("test description") {
            // uncomment below to test the property
            // modelInstance.description shouldBe ("TODO")
        }

        // to test the property `schema` - The schema for the response format,
        // described as a JSON Schema object.
        should("test schema") {
            // uncomment below to test the property
            // modelInstance.schema shouldBe ("TODO")
        }

        // to test the property `strict` - Whether to enable strict schema
        // adherence when generating the output. If set to true, the model will
        // always follow the exact schema defined in the `schema` field. Only a
        // subset of JSON Schema is supported when `strict` is `true`. To learn
        // more, read the [Structured Outputs
        // guide](/docs/guides/structured-outputs).
        should("test strict") {
            // uncomment below to test the property
            // modelInstance.strict shouldBe ("TODO")
        }
    }
}
